[
["microbiota.html", "3 Microbiota 3.1 OTU table overview 3.2 Alpha diversity 3.3 Beta diversity 3.4 Environmental modelling 3.5 Relative abundances 3.6 Depth response: OTU perspective 3.7 Sequence similarity", " 3 Microbiota 3.1 OTU table overview Let’s start by taking a look at the OTU table and get an overall impression of our data. library(tidyverse) library(reshape2) library(stringr) library(ggplot2) library(RColorBrewer) library(forcats) library(kableExtra) options(kableExtra.html.bsTable = T) library(gridExtra) library(DT) library(vegan) library(phyloseq) library(picante) library(seqinr) library(gtools) # install.packages(&#39;webshot&#39;) webshot::install_phantomjs() microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) # meta_data &lt;- meta_data[!str_sub(meta_data$unified_ID,1,2)==&#39;QC&#39;,] # remove QC # samples meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] microbiome &lt;- microbiome[order(microbiome$Sample_ID), ] meta_data &lt;- meta_data[order(meta_data$unified_ID), ] # dropping factors from full data: meta_data[] &lt;- lapply(meta_data, function(x) if (is.factor(x)) factor(x) else x) microbiome[] &lt;- lapply(microbiome, function(x) if (is.factor(x)) factor(x) else x) # all(meta_data$unified_ID==microbiome$Sample_ID) rownames(microbiome) &lt;- microbiome[, 1] microbiome[, 1] &lt;- NULL microbiome[&quot;total_OTUs&quot;] &lt;- apply(microbiome, 1, sum) #total_OTUs = Cummulative read count micro_fig1 &lt;- data.frame(microbiome[, &quot;total_OTUs&quot;]) micro_fig1[&quot;unified_ID&quot;] &lt;- rownames(microbiome) micro_fig1[&quot;normalisation&quot;] &lt;- &quot;none&quot; microbiome$total_OTUs &lt;- NULL microbiome &lt;- sqrt(microbiome) microbiome[&quot;total_OTUs&quot;] &lt;- apply(microbiome, 1, sum) micro_fig2 &lt;- data.frame(microbiome[, &quot;total_OTUs&quot;]) micro_fig2[&quot;unified_ID&quot;] &lt;- rownames(microbiome) micro_fig2[&quot;normalisation&quot;] &lt;- &quot;sqrt&quot; microbiome$total_OTUs &lt;- NULL microbiome &lt;- wisconsin(microbiome) microbiome[&quot;total_OTUs&quot;] &lt;- apply(microbiome, 1, sum) micro_fig3 &lt;- data.frame(microbiome[, &quot;total_OTUs&quot;]) micro_fig3[&quot;unified_ID&quot;] &lt;- rownames(microbiome) micro_fig3[&quot;normalisation&quot;] &lt;- &quot;sqrt wisconsin&quot; micro_fig &lt;- rbind(micro_fig1, micro_fig2, micro_fig3) colnames(micro_fig) &lt;- c(&quot;total_OTUs&quot;, &quot;unified_ID&quot;, &quot;normalisation&quot;) micro_fig[&quot;Species&quot;] &lt;- str_sub(micro_fig$unified_ID, 1, 2) ggplot(micro_fig, aes(x = unified_ID, y = total_OTUs)) + geom_bar(stat = &quot;identity&quot;) + facet_grid(vars(normalisation), vars(Species), scales = &quot;free&quot;) + xlab(&quot;Samples&quot;) + ylab(&quot;Number of OTUs&quot;) + ggtitle(&quot;Cummulative read count after normalisation&quot;) + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) Figure 3.1: Read count overview of the OTU table before and after the normalisation applied in the data analysis for this study. # see # https://chrischizinski.github.io/SNR_R_Group/2016-08-10-Data-Transformations Do the normalisations have affect how well we can discriminate between the microbiota? microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] rownames(microbiome) &lt;- microbiome[, 1] microbiome[, 1] &lt;- NULL pca_plot &lt;- function(microbiome, meta_data, my_title) { micro.pca &lt;- prcomp(microbiome, scale = T) k &lt;- summary(micro.pca)[[&quot;importance&quot;]] micro_pca_df &lt;- data.frame(micro.pca$x) #scores, i.e. principal components of the sponge sample micro_pca_df[&quot;unified_ID&quot;] &lt;- as.factor(rownames(micro_pca_df)) x1 &lt;- paste(&quot;PC1&quot;, round(k[2, 1], digits = 3) * 100, &quot;%&quot;) y1 &lt;- paste(&quot;PC2&quot;, round(k[2, 2], digits = 3) * 100, &quot;%&quot;) micro_pca_df &lt;- left_join(micro_pca_df[, c(&quot;PC1&quot;, &quot;PC2&quot;, &quot;PC3&quot;, &quot;unified_ID&quot;)], meta_data[, c(&quot;Species&quot;, &quot;Depth&quot;, &quot;Latitude&quot;, &quot;Longitude&quot;, &quot;MeanBottomTemp_Cdeg&quot;, &quot;MeanBotSalinity_PSU&quot;, &quot;unified_ID&quot;)]) p &lt;- ggplot(micro_pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 3, mapping = aes(shape = factor(Species))) + ggtitle(my_title) + xlab(x1) + ylab(y1) + labs(shape = &quot;Species&quot;) + theme_bw() + theme(legend.position = &quot;none&quot;) return(p) } untransformed &lt;- pca_plot(microbiome, meta_data, &quot;untransformed&quot;) sqrt_transformed &lt;- pca_plot(sqrt(microbiome), meta_data, &quot;sqrt&quot;) sqrt_wisc_transformed &lt;- pca_plot(wisconsin(sqrt(microbiome)), meta_data, &quot;sqrt and wisconsin&quot;) grid.arrange(untransformed, sqrt_transformed, sqrt_wisc_transformed, nrow = 1, top = &quot;PCA: Impact of normalisation on discrimination of the microbiota&quot;) Figure 3.2: PCA of the data sets with and without transformation/normalisation. Circles are Gb, triangles are Sf, squares are Wb microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] rownames(microbiome) &lt;- microbiome[, 1] microbiome[, 1] &lt;- NULL nmds_plot &lt;- function(microbiome, meta_data, my_title) { micro.mds &lt;- metaMDS(microbiome, k = 2, trymax = 100, distance = &quot;bray&quot;, trace = FALSE) nmds_points &lt;- as.data.frame(micro.mds$points) samples &lt;- data.frame(nmds_points$MDS1, nmds_points$MDS2) samples[&quot;unified_ID&quot;] &lt;- rownames(microbiome) meta_data &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;, &quot;Species&quot;)] samples &lt;- left_join(samples, meta_data) stress &lt;- paste(&quot;Stress=&quot;, round(micro.mds$stress, digits = 3)) p &lt;- ggplot(samples, aes(x = nmds_points.MDS1, y = nmds_points.MDS2)) + geom_point(aes(shape = Species, alpha = 0.5), size = 4) + ggtitle(my_title) + labs(shape = &quot;Sponge species&quot;) + theme_bw() + theme(legend.position = &quot;none&quot;) + xlab(&quot;NMDS 1&quot;) + ylab(&quot;NMDS 2&quot;) + annotate(&quot;text&quot;, x = 0, y = 1, label = stress) return(p) } untransformed &lt;- nmds_plot(microbiome, meta_data, &quot;untransformed&quot;) sqrt_transformed &lt;- nmds_plot(sqrt(microbiome), meta_data, &quot;sqrt&quot;) sqrt_wisc_transformed &lt;- nmds_plot(wisconsin(sqrt(microbiome)), meta_data, &quot;sqrt and wisconsin&quot;) grid.arrange(untransformed, sqrt_transformed, sqrt_wisc_transformed, nrow = 1, top = &quot;NMDS: Impact of normalisation on discrimination of the microbiota&quot;) Figure 3.3: NMDS of the data sets with and without transformation/normalisation. Circles are Gb, triangles are Sf, squares are Wb It seems that we don’t lose any relevant information and the normalisations in fact increase the discriminatory power. 3.2 Alpha diversity The microbiota are composed of 420 OTUs in G. barretti, 461 OTUs in S. fortis and 135 OTUs in W. bursa. While G. barretti and S. fortis share 316, respectively they each only share 2 and 8 OTUs with W. bursa. Only a single OTU (OTU4 or X1969004, an Archaeon) is shared among the three sponge hosts. How does that reflect in their diversities? Below we show Shannon diversity, species richness (SR) and Faith’s phylogenetic distance (PD). library(vegan) library(reshape2) library(phyloseq) library(picante) microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) taxonomy &lt;- read.csv(&quot;data/microbiome_taxonomy.csv&quot;, header = T, sep = &quot;;&quot;) tree &lt;- read.nexus(&quot;data/infile.nex.con.X.tre&quot;) rownames(microbiome) &lt;- microbiome$Sample_ID microbiome$Sample_ID &lt;- NULL otumat &lt;- t(microbiome) otumat &lt;- wisconsin(sqrt(otumat)) colnames(otumat) &lt;- rownames(microbiome) rownames(taxonomy) &lt;- paste0(&quot;X&quot;, taxonomy$OTU_ID) taxonomy$OTU_ID &lt;- NULL # all(rownames(taxonomy)==rownames(otumat)) # relative abundance otumat &lt;- apply(otumat, 2, function(i) i/sum(i)) OTU &lt;- otu_table(otumat, taxa_are_rows = TRUE) # remove low abundance taxa OTU &lt;- filter_taxa(OTU, function(x) mean(x) &gt; 0.0025, # TRUE) taxmat &lt;- as.matrix(taxonomy) TAX &lt;- tax_table(taxmat) biom_data &lt;- phyloseq(OTU, TAX) # Merge into phyloseq object pso &lt;- merge_phyloseq(biom_data, tree) #merging a phyloseq and a tree file pso &lt;- prune_taxa(taxa_sums(pso) &gt; 0, pso) # Calculate Phylogenetic Distance (PD) of the dataset, ALPHA DIVERSITY otu_table_pso &lt;- as.data.frame(pso@otu_table) df.pd &lt;- pd(t(otu_table_pso), tree, include.root = F) df.pd[&quot;unified_ID&quot;] &lt;- rownames(df.pd) # df.pd: PD = Faith&#39;s Phylogenetic diversity, SR= species richness div &lt;- as.data.frame(diversity(t(otumat), index = &quot;shannon&quot;)) div[&quot;spec&quot;] &lt;- str_sub(rownames(div), 1, 2) colnames(div) &lt;- c(&quot;Shannon_diversity&quot;, &quot;spec&quot;) div[&quot;unified_ID&quot;] &lt;- rownames(div) div_indices &lt;- full_join(div, df.pd) md &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;)] div_indices &lt;- left_join(div_indices, md) div_indices &lt;- reshape2::melt(div_indices, id.vars = c(&quot;spec&quot;, &quot;unified_ID&quot;, &quot;Depth&quot;)) ggplot(div_indices, aes(x = Depth, y = value)) + geom_point() + facet_grid(vars(variable), vars(spec), scales = &quot;free&quot;) + theme(axis.text.x = element_text(angle = -90, vjust = 0.5, hjust = 1), legend.position = &quot;none&quot;) + ylab(&quot;Diversity metrics&quot;) + xlab(&quot;Sample depth&quot;) + theme_bw() Figure 3.4: Microbiota diversity indices grouped by sponge species and ordered by sample depth. We see that the HMA sponges G. barretti and S. fortis not only have more OTUs but also a higher diversity in their prokaryotic communities then the LMA sponge W. bursa. 3.3 Beta diversity In a way, the Fig. 3.2 and 3.3 have already shown us the beta diversity in our samples. Looking more into the data, we found that the two dimensional representation can be misleading at times and so we provide the first three axes components for exploration below. library(plot3D) library(rgl) library(plotly) ### PCA microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] rownames(microbiome) &lt;- microbiome[, 1] microbiome[, 1] &lt;- NULL microbiome &lt;- sqrt(microbiome) micro.pca &lt;- prcomp(microbiome, scale = T) k &lt;- summary(micro.pca)[[&quot;importance&quot;]] micro_pca_df &lt;- data.frame(micro.pca$x) #scores, i.e. principal components of the sponge sample micro_pca_df[&quot;unified_ID&quot;] &lt;- as.factor(rownames(micro_pca_df)) x1 &lt;- paste(&quot;PC1&quot;, round(k[2, 1], digits = 3) * 100, &quot;%&quot;) y1 &lt;- paste(&quot;PC2&quot;, round(k[2, 2], digits = 3) * 100, &quot;%&quot;) z1 &lt;- paste(&quot;PC3&quot;, round(k[2, 3], digits = 3) * 100, &quot;%&quot;) micro_pca_df &lt;- left_join(micro_pca_df[, c(&quot;PC1&quot;, &quot;PC2&quot;, &quot;PC3&quot;, &quot;unified_ID&quot;)], meta_data[, c(&quot;Species&quot;, &quot;Depth&quot;, &quot;Latitude&quot;, &quot;Longitude&quot;, &quot;MeanBottomTemp_Cdeg&quot;, &quot;MeanBotSalinity_PSU&quot;, &quot;unified_ID&quot;)]) ## rgl/plot3D: static 3D plot with(micro_pca_df, text3D(PC1, PC2, PC3, colvar = ## micro_pca_df$Depth, theta = 60, phi = 20, xlab = x1, ylab = y1, zlab =z1, main ## = &#39;3D microbiome PCA&#39;, labels = micro_pca_df$unified_ID, cex = 0.9, bty = &#39;g&#39;, ## ticktype = &#39;detailed&#39;, d = 2, clab = c(&#39;Depth [m]&#39;), adj = 0.5, font = 2)) ## plotly axx &lt;- list(backgroundcolor = &quot;rgb(211,211,211)&quot;, gridcolor = &quot;rgb(255,255,255)&quot;, title = x1, showbackground = TRUE) axy &lt;- list(backgroundcolor = &quot;rgb(211,211,211)&quot;, gridcolor = &quot;rgb(255,255,255)&quot;, title = y1, showbackground = TRUE) axz &lt;- list(backgroundcolor = &quot;rgb(211,211,211)&quot;, gridcolor = &quot;rgb(255,255,255)&quot;, title = z1, showbackground = TRUE) mic_i &lt;- plot_ly(micro_pca_df, x = ~micro_pca_df$PC1, y = ~micro_pca_df$PC2, z = ~micro_pca_df$PC3, symbol = ~Species, symbols = c(&quot;diamond&quot;, &quot;x&quot;, &quot;circle&quot;), color = ~micro_pca_df$Depth) %&gt;% add_markers() %&gt;% layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz)) mic_i Figure 3.5: PCA of the met # for saving locally f&lt;- basename(tempfile(&#39;PCA_microbiome_plotly&#39;, &#39;.&#39;, # &#39;.html&#39;)) on.exit(unlink(f), add = TRUE) html &lt;- htmlwidgets::saveWidget(mic_i, # f) rm(mic_i, f, html, k, x1, y1, z1, micro.pca, axx, axy, axz, micro_pca_df) library(plot3D) library(rgl) library(plotly) ### NMDS microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] rownames(microbiome) &lt;- microbiome[, 1] microbiome[, 1] &lt;- NULL # microbiome &lt;- sqrt(microbiome) micro.mds &lt;- metaMDS(microbiome, k = 3, trymax = 100, distance = &quot;bray&quot;, trace = FALSE) nmds_points &lt;- as.data.frame(micro.mds$points) samples &lt;- data.frame(nmds_points$MDS1, nmds_points$MDS2, nmds_points$MDS3) samples[&quot;unified_ID&quot;] &lt;- rownames(microbiome) meta_data &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;, &quot;Species&quot;)] samples &lt;- left_join(samples, meta_data) colnames(samples) &lt;- c(&quot;PC1&quot;, &quot;PC2&quot;, &quot;PC3&quot;, &quot;unified_ID&quot;, &quot;Depth&quot;, &quot;Species&quot;) stress &lt;- paste(&quot;Stress=&quot;, round(micro.mds$stress, digits = 6)) x1 &lt;- c(&quot;MDS1&quot;) y1 &lt;- c(&quot;MDS2&quot;) z1 &lt;- c(&quot;MDS3&quot;) # rgl/plot3D with(samples, text3D(PC1, PC2, PC3, colvar = samples$Depth, theta = # 60, phi = 20, xlab = x1, ylab = y1, zlab =z1, main = &#39;3D microbiome NMDS&#39;, # labels = samples$unified_ID, cex = 0.9, bty = &#39;g&#39;, ticktype = &#39;detailed&#39;, d = # 2, clab = c(&#39;Depth [m]&#39;), adj = 0.5, font = 2)) ## plotly axx &lt;- list(backgroundcolor = &quot;rgb(211,211,211)&quot;, gridcolor = &quot;rgb(255,255,255)&quot;, title = x1, showbackground = TRUE) axy &lt;- list(backgroundcolor = &quot;rgb(211,211,211)&quot;, gridcolor = &quot;rgb(255,255,255)&quot;, title = y1, showbackground = TRUE) axz &lt;- list(backgroundcolor = &quot;rgb(211,211,211)&quot;, gridcolor = &quot;rgb(255,255,255)&quot;, title = z1, showbackground = TRUE) mic_i &lt;- plot_ly(samples, x = ~samples$PC1, y = ~samples$PC2, z = ~samples$PC3, symbol = ~Species, symbols = c(&quot;diamond&quot;, &quot;x&quot;, &quot;circle&quot;), color = samples$Depth) %&gt;% add_markers() %&gt;% layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz)) mic_i Figure 3.6: NMDS based on Bray-Curtis dissimilarity. # for saving locally f&lt;- basename(tempfile(&#39;NMDS_microbiome_plotly&#39;, &#39;.&#39;, # &#39;.html&#39;)) on.exit(unlink(f), add = TRUE) html &lt;- htmlwidgets::saveWidget(mic_i, # f) rm(mic_i, f, html, k, x1, y1, z1, micro.mds, axx, axy, axz, samples, nmds_points) NMDS Stress= 9e-05. In some of the downstream analyses, we distinguish between common/abundant OTUs and rare OTUs. We use a cutoff of 0.25% average relative abundance per OTU for the classification. That implies drastically modifying the original numbers of OTUs per sponge as outlined below. micro &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) emp &lt;- read.csv(&quot;data/SpongeEMP.csv&quot;, header = T, sep = &quot;;&quot;) emp[&quot;XOTU_id&quot;] &lt;- str_replace(emp$OTU_ID, &quot;OTU&quot;, &quot;X196900&quot;) # The full data set had the entries listed by sponge host, so there are 62 # duplicates in the OTU list length(emp$XOTU_id) # 207 # length(unique(emp$XOTU_id)) # 145 emp[&quot;num&quot;] &lt;- as.numeric(str_replace(emp$OTU_ID, &quot;OTU&quot;, &quot;&quot;)) emp &lt;- emp[order(emp$num), ] emp[&quot;dup&quot;] &lt;- duplicated(emp$num) # dim(emp[emp$dup==&#39;TRUE&#39;,]) #62 emp &lt;- emp[emp$dup == &quot;FALSE&quot;, ] emp[, c(&quot;sponge&quot;, &quot;num&quot;, &quot;dup&quot;)] &lt;- list(NULL) OTU_prep_sqrt &lt;- function(micro) { rownames(micro) &lt;- micro$Sample_ID micro$Sample_ID &lt;- NULL # micro &lt;- sqrt(micro) micro_gb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Gb&quot;), ] micro_sf &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Sf&quot;), ] micro_wb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Wb&quot;), ] micro_gb &lt;- micro_gb[, colSums(micro_gb != 0) &gt; 0] #removes columns that only contain 0 micro_sf &lt;- micro_sf[, colSums(micro_sf != 0) &gt; 0] micro_wb &lt;- micro_wb[, colSums(micro_wb != 0) &gt; 0] micros &lt;- list(gb = micro_gb, sf = micro_sf, wb = micro_wb) return(micros) } micro_ds &lt;- OTU_prep_sqrt(micro) overall_rabdc &lt;- function(micro) { mic &lt;- micro n &lt;- 0 k &lt;- dim(mic)[1] mic[&quot;rowsum&quot;] &lt;- apply(mic, 1, sum) while (n &lt; k) { n &lt;- n + 1 mic[n, ] &lt;- mic[n, ]/(mic$rowsum[n]) } mic$rowsum &lt;- NULL mic &lt;- data.frame(t(mic)) mic[&quot;avg_rel_abdc&quot;] &lt;- apply(mic, 1, mean) mic[&quot;occurrence&quot;] &lt;- ifelse(mic$avg &gt; 0.0025, &quot;common&quot;, &quot;rare&quot;) return(mic) } gb_occurrence &lt;- overall_rabdc(micro_ds$gb) sf_occurrence &lt;- overall_rabdc(micro_ds$sf) wb_occurrence &lt;- overall_rabdc(micro_ds$wb) gb_occurrence &lt;- gb_occurrence[, c(&quot;avg_rel_abdc&quot;, &quot;occurrence&quot;)] gb_occurrence[&quot;XOTU_id&quot;] &lt;- rownames(gb_occurrence) gb_occ_emp &lt;- left_join(gb_occurrence, emp) sf_occurrence &lt;- sf_occurrence[, c(&quot;avg_rel_abdc&quot;, &quot;occurrence&quot;)] sf_occurrence[&quot;XOTU_id&quot;] &lt;- rownames(sf_occurrence) sf_occ_emp &lt;- left_join(sf_occurrence, emp) wb_occurrence &lt;- wb_occurrence[, c(&quot;avg_rel_abdc&quot;, &quot;occurrence&quot;)] wb_occurrence[&quot;XOTU_id&quot;] &lt;- rownames(wb_occurrence) wb_occ_emp &lt;- left_join(wb_occurrence, emp) gb_aggr &lt;- aggregate(gb_occ_emp$avg_rel_abdc, by = list(gb_occ_emp$occurrence), FUN = &quot;length&quot;) sf_aggr &lt;- aggregate(sf_occ_emp$avg_rel_abdc, by = list(sf_occ_emp$occurrence), FUN = &quot;length&quot;) wb_aggr &lt;- aggregate(wb_occ_emp$avg_rel_abdc, by = list(wb_occ_emp$occurrence), FUN = &quot;length&quot;) aggr &lt;- cbind(gb_aggr, sf_aggr$x, wb_aggr$x) colnames(aggr) &lt;- c(&quot;OTU classification&quot;, &quot;count Gb&quot;, &quot;count Sf&quot;, &quot;count Wb&quot;) options(kableExtra.html.bsTable = T) kable(aggr, col.names = c(&quot;OTU classification&quot;, &quot;count (Gb)&quot;, &quot;count (Sf)&quot;, &quot;count (Wb)&quot;), booktabs = T, caption = &quot;Number of OTUs being excluded and retained in the three sponges&#39; microbiota when filtering for average relative abundance &gt; 0.25%.&quot;, row.names = FALSE) %&gt;% kable_styling(bootstrap_options = c(&quot;hover&quot;, &quot;bordered&quot;, &quot;condensed&quot;, &quot;responsive&quot;), full_width = F, latex_options = c(&quot;scale_down&quot;)) Table 3.1: Number of OTUs being excluded and retained in the three sponges’ microbiota when filtering for average relative abundance &gt; 0.25%. OTU classification count (Gb) count (Sf) count (Wb) common 96 89 20 rare 324 372 115 That means, for G. barretti we exclude 77.1 % of OTUs, for S. fortis 80.7 % and for W. bursa 85.2%. gb_common &lt;- gb_occ_emp[gb_occ_emp$occurrence == &quot;common&quot;, ] sf_common &lt;- sf_occ_emp[sf_occ_emp$occurrence == &quot;common&quot;, ] wb_common &lt;- wb_occ_emp[wb_occ_emp$occurrence == &quot;common&quot;, ] gb_aggr &lt;- aggregate(gb_common$avg_rel_abdc, by = list(gb_common$spongeEMP_enriched), FUN = &quot;length&quot;) sf_aggr &lt;- aggregate(sf_common$avg_rel_abdc, by = list(sf_common$spongeEMP_enriched), FUN = &quot;length&quot;) wb_aggr &lt;- aggregate(wb_common$avg_rel_abdc, by = list(wb_common$spongeEMP_enriched), FUN = &quot;length&quot;) aggr &lt;- cbind(gb_aggr, sf_aggr$x) aggr &lt;- left_join(aggr, wb_aggr, by = &quot;Group.1&quot;) colnames(aggr) &lt;- c(&quot;EMP OTU count&quot;, &quot;Gb&quot;, &quot;Sf&quot;, &quot;Wb&quot;) options(kableExtra.html.bsTable = T) kable(aggr, col.names = c(&quot;OTU classification&quot;, &quot;count (Gb)&quot;, &quot;count (Sf)&quot;, &quot;count (Wb)&quot;), booktabs = T, caption = &quot;Number of common/abundant OTUs found in the SpongeEMP data base&quot;, row.names = FALSE) %&gt;% kable_styling(bootstrap_options = c(&quot;hover&quot;, &quot;bordered&quot;, &quot;condensed&quot;, &quot;responsive&quot;), full_width = F, latex_options = c(&quot;scale_down&quot;)) Table 3.2: Number of common/abundant OTUs found in the SpongeEMP data base OTU classification count (Gb) count (Sf) count (Wb) no 23 25 9 yes 72 64 11 3.4 Environmental modelling In order to investigate whether and which of the environmental parameter might “explain”/correlate with variation the the microbiota, we apply constrained and unconstrained ecological data analysis methods. 3.4.1 Constrained modelling approach Automatic stepwise model building We use canonical correspondence analysis as method for ordination. According to the manual for the R package vegan, “a good dissimilarity index for multidimensional scaling should have a high rank-order similarity with gradient separation” (Oksanen et al. 2019). Thus interpreting the results of Tab 3.3, we find that square root transformation and Wisconsin standardisation increase the rank correlation between the microbial community dissimilarity matrix and the environmental gradient separation in all three sponge microbiota for a number of ecological dissimilarity indices. library(vegan) microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] # Gb12 has no salinity and temperature: impute from Gb11 &amp; Gb13: Salinity:34.92; # Temp:3.59 row &lt;- which(meta_data$unified_ID == &quot;Gb12&quot;) temp &lt;- which(colnames(meta_data) == &quot;MeanBottomTemp_Cdeg&quot;) sal &lt;- which(colnames(meta_data) == &quot;MeanBotSalinity_PSU&quot;) meta_data[row, temp] &lt;- 3.59 meta_data[row, sal] &lt;- 34.92 rm(row, temp, sal) OTU_prep_sqrt &lt;- function(micro) { rownames(micro) &lt;- micro$Sample_ID micro$Sample_ID &lt;- NULL micro &lt;- sqrt(micro) micro_gb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Gb&quot;), ] micro_sf &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Sf&quot;), ] micro_wb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Wb&quot;), ] micro_gb &lt;- micro_gb[, colSums(micro_gb != 0) &gt; 0] micro_sf &lt;- micro_sf[, colSums(micro_sf != 0) &gt; 0] micro_wb &lt;- micro_wb[, colSums(micro_wb != 0) &gt; 0] micros &lt;- list(gb = micro_gb, sf = micro_sf, wb = micro_wb) return(micros) } microbiomes &lt;- OTU_prep_sqrt(microbiome) md_prep &lt;- function(microbiomes, meta_data) { meta_data &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;, &quot;Latitude&quot;, &quot;Longitude&quot;, &quot;MeanBottomTemp_Cdeg&quot;, &quot;MeanBotSalinity_PSU&quot;, &quot;YEAR&quot;)] gb &lt;- microbiomes$gb sf &lt;- microbiomes$sf wb &lt;- microbiomes$wb gb_md &lt;- meta_data[meta_data$unified_ID %in% rownames(gb), ] rownames(gb_md) &lt;- gb_md$unified_ID gb_md &lt;- gb_md[order(gb_md$unified_ID), ] all(rownames(microbiomes$gb) == rownames(gb_md)) gb_md &lt;- gb_md[, c(&quot;Depth&quot;, &quot;Latitude&quot;, &quot;Longitude&quot;, &quot;MeanBottomTemp_Cdeg&quot;, &quot;MeanBotSalinity_PSU&quot;, &quot;YEAR&quot;)] sf_md &lt;- meta_data[meta_data$unified_ID %in% rownames(sf), ] rownames(sf_md) &lt;- sf_md$unified_ID sf_md &lt;- sf_md[order(sf_md$unified_ID), ] sf_md$unified_ID &lt;- NULL wb_md &lt;- meta_data[meta_data$unified_ID %in% rownames(wb), ] rownames(wb_md) &lt;- wb_md$unified_ID wb_md &lt;- wb_md[order(wb_md$unified_ID), ] wb_md$unified_ID &lt;- NULL mds &lt;- list(gb_md = gb_md, sf_md = sf_md, wb_md = wb_md) return(mds) } mds &lt;- md_prep(microbiomes, meta_data) # Standardization If there is a large difference between smallest non-zero # abundance and largest abundance, we want to reduce this difference. Usually # square root transformation is sufficient to balance the data. Wisconsin double # standardization often improves the gradient detection ability of dissimilarity # indices. # Which dissimilarity index is best? gb_ri1 &lt;- rankindex(scale(mds$gb_md), (microbiomes$gb)^2, c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) #unstandardized gb_ri2 &lt;- rankindex(scale(mds$gb_md), microbiomes$gb, c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) #sqrt gb_ri3 &lt;- rankindex(scale(mds$gb_md), wisconsin(microbiomes$gb), c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) #sqrt and wisconsin sf_ri1 &lt;- rankindex(scale(mds$sf_md), (microbiomes$sf)^2, c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) sf_ri2 &lt;- rankindex(scale(mds$sf_md), microbiomes$sf, c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) sf_ri3 &lt;- rankindex(scale(mds$sf_md), wisconsin(microbiomes$sf), c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) wb_ri1 &lt;- rankindex(scale(mds$wb_md), (microbiomes$wb)^2, c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) wb_ri2 &lt;- rankindex(scale(mds$wb_md), microbiomes$wb, c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) wb_ri3 &lt;- rankindex(scale(mds$wb_md), wisconsin(microbiomes$wb), c(&quot;euc&quot;, &quot;man&quot;, &quot;bray&quot;, &quot;jac&quot;, &quot;kul&quot;)) rankindices &lt;- rbind(gb_ri1, gb_ri2, gb_ri3, sf_ri1, sf_ri2, sf_ri3, wb_ri1, wb_ri2, wb_ri3) rankindices &lt;- as.data.frame(rankindices) rankindices[&quot;Sponge species&quot;] &lt;- c(rep(&quot;G. barretti&quot;, 3), rep(&quot;S. fortis&quot;, 3), rep(&quot;W. bursa&quot;, 3)) rankindices[&quot;Normalisation&quot;] &lt;- c(rep(c(&quot;none&quot;, &quot;sqrt&quot;, &quot;sqrt &amp; wisconsin&quot;), 3)) options(kableExtra.html.bsTable = T) kable(rankindices, col.names = c(&quot;Euclidean&quot;, &quot;Manhattan&quot;, &quot;Bray–Curtis&quot;, &quot;Jaccard&quot;, &quot;Kulczynski&quot;, &quot;Sponge species&quot;, &quot;Normalisation&quot;), booktabs = T, caption = &quot;Rank correlation between dissimilarity indices and gradient separation. The higher the number the stronger the correlation, i.e. the better the fit.&quot;, row.names = FALSE) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;, &quot;bordered&quot;, &quot;condensed&quot;, &quot;responsive&quot;), full_width = F, latex_options = c(&quot;striped&quot;, &quot;scale_down&quot;)) Table 3.3: Rank correlation between dissimilarity indices and gradient separation. The higher the number the stronger the correlation, i.e. the better the fit. Euclidean Manhattan Bray–Curtis Jaccard Kulczynski Sponge species Normalisation -0.0512024 -0.0445135 0.3979615 0.3979615 0.4509158 G. barretti none 0.0930562 0.1658067 0.3967033 0.3967033 0.4010193 G. barretti sqrt 0.4072305 0.4026915 0.4026915 0.4026915 0.4026915 G. barretti sqrt &amp; wisconsin 0.0816401 0.1826975 0.3111549 0.3111549 0.4108128 S. fortis none 0.3285092 0.3476778 0.4620775 0.4620775 0.4877255 S. fortis sqrt 0.5056811 0.5471905 0.5471905 0.5471905 0.5471905 S. fortis sqrt &amp; wisconsin 0.0280922 0.0994375 0.0008681 0.0008681 0.0048476 W. bursa none 0.0376971 0.4854434 0.2801306 0.2801306 0.2656573 W. bursa sqrt -0.0833252 0.3617890 0.3617890 0.3617890 0.3617890 W. bursa sqrt &amp; wisconsin We adapt the microbial data sets accordingly applying square root transformation and Wisconsin standardisation of the microbiota in all subsequent ecological analyses. Then, we build a model (null model) without any environmental parameters, and one (full model) with the maximum number of environmental parameters (terms) possible so that none of them have a VIF &gt; 10. Finally, we use the stepwise model building function ordistep to determine, which of the environmental parameters is a significant constraint for the microbiomes. The function compares the null model and adds and removes terms from the full model to find (combinations of) significant constraints. The significance of the parameters is then tested in an ANOVA. G. barretti: first the VIFs of all terms included in the full model, second the result of the stepwise model building, third the ANOVA of the suggested model. # mod0 has no terms, intercept only mod1 includes all terms possible with a VIF &lt; # 10. Available: &#39;Depth&#39;, &#39;Latitude&#39;, &#39;Longitude&#39;, &#39;MeanBottomTemp_Cdeg&#39;, # &#39;MeanBotSalinity_PSU&#39;, &#39;YEAR&#39; ## Gb mod0 &lt;- cca(wisconsin(microbiomes$gb) ~ 1, mds$gb_md) mod1 &lt;- cca(wisconsin(microbiomes$gb) ~ Depth + Latitude + MeanBottomTemp_Cdeg + YEAR, mds$gb_md) vif.cca(mod1) ## Depth Latitude MeanBottomTemp_Cdeg YEAR ## 1.230382 1.775034 1.929029 1.651565 mod &lt;- ordistep(mod0, scope = formula(mod1), trace = F) #0 mod$anova ## Df AIC F Pr(&gt;F) ## + Depth 1 6.7097 3.4066 0.005 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anova(mod) ## Permutation test for cca under reduced model ## Permutation: free ## Number of permutations: 999 ## ## Model: cca(formula = wisconsin(microbiomes$gb) ~ Depth, data = mds$gb_md) ## Df ChiSquare F Pr(&gt;F) ## Model 1 0.34451 3.4066 0.001 *** ## Residual 12 1.21355 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 S. fortis: first the VIFs of all terms included in the full model, second the result of the stepwise model building, third the ANOVA of the suggested model. ## Sf mod0 &lt;- cca(wisconsin(microbiomes$sf) ~ 1, mds$sf_md) mod1 &lt;- cca(wisconsin(microbiomes$sf) ~ Depth + Latitude + YEAR + MeanBotSalinity_PSU + Longitude, mds$sf_md) vif.cca(mod1) ## Depth Latitude YEAR MeanBotSalinity_PSU ## 4.218950 5.079261 1.082453 3.648340 ## Longitude ## 5.071690 mod &lt;- ordistep(mod0, scope = formula(mod1), trace = F) mod$anova ## Df AIC F Pr(&gt;F) ## + Depth 1 13.547 2.1462 0.005 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anova(mod) ## Permutation test for cca under reduced model ## Permutation: free ## Number of permutations: 999 ## ## Model: cca(formula = wisconsin(microbiomes$sf) ~ Depth, data = mds$sf_md) ## Df ChiSquare F Pr(&gt;F) ## Model 1 0.31199 2.1462 0.001 *** ## Residual 13 1.88978 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 W. bursa: first the VIFs of all terms included in the full model, second the result of the stepwise model building, third the ANOVA of the suggested model. ## Wb mod0 &lt;- cca(wisconsin(microbiomes$wb) ~ 1, mds$wb_md) mod1 &lt;- cca(wisconsin(microbiomes$wb) ~ Depth + Latitude + MeanBottomTemp_Cdeg + YEAR, mds$wb_md) vif.cca(mod1) ## Depth Latitude MeanBottomTemp_Cdeg YEAR ## 2.216302 1.217879 2.402357 1.153565 mod &lt;- ordistep(mod0, scope = formula(mod1), trace = F) mod$anova ## Df AIC F Pr(&gt;F) ## + Depth 1 25.701 1.6576 0.005 ** ## + Latitude 1 25.993 1.4649 0.030 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anova(mod) ## Permutation test for cca under reduced model ## Permutation: free ## Number of permutations: 999 ## ## Model: cca(formula = wisconsin(microbiomes$wb) ~ Depth + Latitude, data = mds$wb_md) ## Df ChiSquare F Pr(&gt;F) ## Model 2 0.8527 1.5888 0.001 *** ## Residual 13 3.4888 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 For all G. barretti and S. fortis depth is a significant constraint of the microbial community. For W. bursa we find temperature to be a significant constraint. 3.4.2 Unconstrained modelling approach In an alternative approach, we fit environmental vectors onto an ordination of the microbiota. This method allows to include all environmental parameters (regardless of collinearity). Length of the arrow indicates strength of the predictor (environmental parameter). microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] row &lt;- which(meta_data$unified_ID == &quot;Gb12&quot;) temp &lt;- which(colnames(meta_data) == &quot;MeanBottomTemp_Cdeg&quot;) sal &lt;- which(colnames(meta_data) == &quot;MeanBotSalinity_PSU&quot;) meta_data[row, temp] &lt;- 3.59 meta_data[row, sal] &lt;- 34.92 rm(row, temp, sal) microbiomes &lt;- OTU_prep_sqrt(microbiome) mds &lt;- md_prep(microbiomes, meta_data) colnames(mds$gb_md) &lt;- c(&quot;Depth&quot;, &quot;Lat&quot;, &quot;Lon&quot;, &quot;Temp&quot;, &quot;Sal&quot;, &quot;Year&quot;) colnames(mds$sf_md) &lt;- c(&quot;Depth&quot;, &quot;Lat&quot;, &quot;Lon&quot;, &quot;Temp&quot;, &quot;Sal&quot;, &quot;Year&quot;) colnames(mds$wb_md) &lt;- c(&quot;Depth&quot;, &quot;Lat&quot;, &quot;Lon&quot;, &quot;Temp&quot;, &quot;Sal&quot;, &quot;Year&quot;) dist_micro &lt;- vegdist(wisconsin(microbiomes$gb)) #distance matrix ordi_micro &lt;- metaMDS(dist_micro, trace = F) # ordination ef &lt;- envfit(ordi_micro, mds$gb_md, permutations = 999) # fitting arrows; STRATA? plot(ordi_micro, display = &quot;sites&quot;) #plot plot(ef, p.max = 0.05) #arrows Figure 3.7: Fitting significant (p&lt;0.05) environmental vectors onto ordination of G. barretti microbiome. dist_micro &lt;- vegdist(wisconsin(microbiomes$sf)) # distance matrix ordi_micro &lt;- metaMDS(dist_micro, trace = F) # ordination ef &lt;- envfit(ordi_micro, mds$sf_md, permutations = 999) # fitting arrows plot(ordi_micro, display = &quot;sites&quot;) # plot plot(ef, p.max = 0.05) # arrows Figure 3.8: Fitting significant (p&lt;0.05) environmental vectors onto ordination of S. fortis microbiome. dist_micro &lt;- vegdist(wisconsin(microbiomes$wb)) # distance matrix ordi_micro &lt;- metaMDS(dist_micro, trace = F) # ordination ef &lt;- envfit(ordi_micro, mds$wb_md, permutations = 999) # fitting arrows plot(ordi_micro, display = &quot;sites&quot;) # plot plot(ef, p.max = 0.05) # arrows Figure 3.9: Fitting significant (p&lt;0.05) environmental vectors onto ordination of W. bursa microbiome. 3.4.3 Hierarchical clustering So far, we’ve treated depth as a linear variable. With these clustering method, we’re asking whether there are particular groups standing out. ## Clustering par(mfrow = c(1, 3)) dist_micro &lt;- vegdist(wisconsin(microbiomes$gb)) #distance matrix clua &lt;- hclust(dist_micro, &quot;average&quot;) #average= UPGMA plot(clua, sub = &quot;Gb&quot;, xlab = &quot;UPGMA&quot;) rect.hclust(clua, 2) grp1 &lt;- cutree(clua, 2) dist_micro &lt;- vegdist(wisconsin(microbiomes$sf)) #distance matrix clua &lt;- hclust(dist_micro, &quot;average&quot;) #average= UPGMA plot(clua, sub = &quot;Sf&quot;, xlab = &quot;UPGMA&quot;) grp2 &lt;- cutree(clua, 2) dist_micro &lt;- vegdist(wisconsin(microbiomes$wb)) #distance matrix clua &lt;- hclust(dist_micro, &quot;average&quot;) #average= UPGMA plot(clua, sub = &quot;Wb&quot;, xlab = &quot;UPGMA&quot;) Figure 3.10: Hclust grp3 &lt;- cutree(clua, 2) par(mfrow = c(1, 1)) # ord &lt;- cca(wisconsin(microbiomes$gb)) plot(ord, display = &#39;sites&#39;) # ordihull(ord, grp1, lty = 2, col = &#39;red&#39;) # ord &lt;- cca(wisconsin(microbiomes$sf)) plot(ord, display = &#39;sites&#39;) # ordihull(ord, grp2, lty = 2, col = &#39;red&#39;) # ord &lt;- cca(wisconsin(microbiomes$wb)) plot(ord, display = &#39;sites&#39;) # ordihull(ord, grp3, lty = 2, col = &#39;red&#39;) library(pheatmap) library(RColorBrewer) library(viridis) microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] micro_ds &lt;- OTU_prep_sqrt(microbiome) mds &lt;- md_prep(microbiomes, meta_data) gb_md &lt;- mds$gb_md sf_md &lt;- mds$sf_md wb_md &lt;- mds$wb_md gb_md[&quot;depth_category&quot;] &lt;- ifelse(gb_md$Depth &lt; 1000, &quot;shallow&quot;, &quot;deep&quot;) sf_md[&quot;depth_category&quot;] &lt;- ifelse(sf_md$Depth &lt; 1000, &quot;shallow&quot;, &quot;deep&quot;) wb_md[&quot;depth_category&quot;] &lt;- ifelse(wb_md$Depth &lt; 1000, &quot;shallow&quot;, &quot;deep&quot;) k &lt;- vegdist(wisconsin(micro_ds$gb)) mat_col &lt;- data.frame(group = gb_md$depth_category) rownames(mat_col) &lt;- rownames(micro_ds$gb) col_groups &lt;- gb_md$depth_category mat_colors &lt;- list(group = c(&quot;gold&quot;, &quot;dodgerblue&quot;)) names(mat_colors$group) &lt;- unique(col_groups) pheatmap(k, color = magma(10), border_color = NA, show_colnames = FALSE, show_rownames = FALSE, annotation_col = mat_col, annotation_colors = mat_colors, drop_levels = TRUE, fontsize = 10, main = &quot;G. barretti heatmap&quot;) k &lt;- vegdist(wisconsin(micro_ds$sf)) mat_col &lt;- data.frame(group = sf_md$depth_category) rownames(mat_col) &lt;- rownames(micro_ds$sf) col_groups &lt;- sf_md$depth_category mat_colors &lt;- list(group = c(&quot;gold&quot;, &quot;dodgerblue&quot;)) names(mat_colors$group) &lt;- unique(col_groups) pheatmap(k, color = magma(10), border_color = NA, show_colnames = FALSE, show_rownames = FALSE, annotation_col = mat_col, annotation_colors = mat_colors, drop_levels = TRUE, fontsize = 10, main = &quot;S. fortis heatmap&quot;) k &lt;- vegdist(wisconsin(micro_ds$wb)) mat_col &lt;- data.frame(group = wb_md$depth_category) rownames(mat_col) &lt;- rownames(micro_ds$wb) col_groups &lt;- wb_md$depth_category mat_colors &lt;- list(group = c(&quot;gold&quot;, &quot;dodgerblue&quot;)) names(mat_colors$group) &lt;- unique(col_groups) pheatmap(k, color = magma(10), border_color = NA, show_colnames = TRUE, show_rownames = TRUE, annotation_col = mat_col, annotation_colors = mat_colors, drop_levels = TRUE, fontsize = 10, main = &quot;W. bursa heatmap&quot;) # library(dendsort) sort_hclust &lt;- function(...) # as.hclust(dendsort(as.dendrogram(...))) mat_cluster_rows &lt;- # sort_hclust(hclust(dist(k))) mat_cluster_cols &lt;- hclust(dist(t(k))) # mat_cluster_cols &lt;- sort_hclust(mat_cluster_cols) mat_breaks &lt;- seq(min(k), # max(k), length.out = 10) # pheatmap( mat = k, color = inferno(length(mat_breaks) - 1), breaks = # mat_breaks, border_color = NA, cluster_cols = mat_cluster_cols, cluster_rows = # mat_cluster_rows, show_colnames = TRUE, show_rownames = TRUE, annotation_col = # mat_col, annotation_colors = mat_colors, drop_levels = TRUE, fontsize = 14, # main = &#39;Sorted heatmap&#39; ) 3.4.4 Oceanographic setting: water masses Finally, we test whether there are statistic differences in the prokaryotic community compositions between above and below 1000 m depth. # ========== Testing differences of microbiome in different water masses # =========== microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- meta_data[meta_data$unified_ID %in% microbiome$Sample_ID, ] # No data transformation/normalisation, as Vegantutor (Oksanen, 2013) p. 32 # doesn&#39;t do it either. betadiver (x, ...); x = community data matrix OTU_prep &lt;- function(micro) { rownames(micro) &lt;- micro$Sample_ID micro$Sample_ID &lt;- NULL # micro &lt;- sqrt(micro) micro_gb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Gb&quot;), ] micro_sf &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Sf&quot;), ] micro_wb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Wb&quot;), ] micro_gb &lt;- micro_gb[, colSums(micro_gb != 0) &gt; 0] micro_sf &lt;- micro_sf[, colSums(micro_sf != 0) &gt; 0] micro_wb &lt;- micro_wb[, colSums(micro_wb != 0) &gt; 0] micros &lt;- list(gb = micro_gb, sf = micro_sf, wb = micro_wb) return(micros) } micro_ds &lt;- OTU_prep(microbiome) meta_data &lt;- meta_data_prep(meta_data) # Gb gb_md &lt;- meta_data[meta_data$unified_ID %in% rownames(micro_ds$gb), ] gb_md[&quot;depth_category&quot;] &lt;- ifelse(gb_md$Depth &lt; 1000, &quot;shallow&quot;, &quot;deep&quot;) # all(rownames(micro_ds$gb)==gb_md$unified_ID) bd &lt;- betadiver(micro_ds$gb, &quot;z&quot;) adonis(bd ~ gb_md$depth_category) ## ## Call: ## adonis(formula = bd ~ gb_md$depth_category) ## ## Permutation: free ## Number of permutations: 999 ## ## Terms added sequentially (first to last) ## ## Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) ## gb_md$depth_category 1 0.48654 0.48654 9.6668 0.44616 0.003 ** ## Residuals 12 0.60398 0.05033 0.55384 ## Total 13 1.09052 1.00000 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Sf sf_md &lt;- meta_data[meta_data$unified_ID %in% rownames(micro_ds$sf), ] sf_md[&quot;depth_category&quot;] &lt;- ifelse(sf_md$Depth &lt; 1000, &quot;shallow&quot;, &quot;deep&quot;) # all(rownames(micro_ds$sf)==sf_md$unified_ID) bd &lt;- betadiver(micro_ds$sf, &quot;z&quot;) adonis(bd ~ sf_md$depth_category) ## ## Call: ## adonis(formula = bd ~ sf_md$depth_category) ## ## Permutation: free ## Number of permutations: 999 ## ## Terms added sequentially (first to last) ## ## Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) ## sf_md$depth_category 1 0.3649 0.3649 4.05 0.23753 0.001 *** ## Residuals 13 1.1713 0.0901 0.76247 ## Total 14 1.5362 1.00000 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Wb wb_md &lt;- meta_data[meta_data$unified_ID %in% rownames(micro_ds$wb), ] wb_md[&quot;depth_category&quot;] &lt;- ifelse(wb_md$Depth &lt; 1000, &quot;shallow&quot;, &quot;deep&quot;) # all(rownames(micro_ds$wb)==wb_md$unified_ID) bd &lt;- betadiver(micro_ds$wb, &quot;z&quot;) adonis(bd ~ wb_md$depth_category) ## ## Call: ## adonis(formula = bd ~ wb_md$depth_category) ## ## Permutation: free ## Number of permutations: 999 ## ## Terms added sequentially (first to last) ## ## Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) ## wb_md$depth_category 1 0.27974 0.27974 1.37 0.08914 0.149 ## Residuals 14 2.85866 0.20419 0.91086 ## Total 15 3.13841 1.00000 To summarise, in this section on environmental modelling, we’ve shown that the prokaryotic communities in G. barretti and S. fortis seem to be influenced by depth both in contrained and unconstrained methods. For W. bursa we get mixed results. Hence at this point, the picture of a depth effect on LMA sponge prokaryotic communities remains ambiguous. Our intention with the hierarchical clustering was to see if we could group the variation in the community composition in order to see if we can take hints from that about which aspect of the (a)biotic environment most likely causes/links to the changes. For G. barretti, we see the two main clusters representing the “shallow” (Gb1-Gb10: 407-801 m) versus the “deep” (Gb11-Gb14: 1213-1427 m) specimens. These two groups match the two water masses detected in this part of the North Atlantic. The clustering also yiels a distinct clade/group of deep specimens in S. fortis (Sf9-Sf15: 1036-1476 m). Again, this highlights the distinctiveness of the prokatyotic commmunity of the deep specimens, potentially linked to the differences in the surrounding water masses. In W. bursa the specimens originating from depths greater than 1000 m (Wb13-Wb16) cluster with shallow samples and thus, we cannot deduce any stratifying effect of depth or water masses on its microbiome. This section has given us a general impression that depth affects (mainly HMA) sponge prokarytoic community compositions. But can we be more specific and identify which OTUs are behind those patterns? 3.5 Relative abundances 3.5.1 Bar plots Enough of the anonymous modelling and data fitting, let’s take a look at the taxonomy of the OTUs to see who is there. micro &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/PANGAEA_Final.csv&quot;, header = T, sep = &quot;;&quot;) taxonomy &lt;- read.csv(&quot;data/microbiome_taxonomy.csv&quot;, header = T, sep = &quot;;&quot;) OTU_prep_sqrt &lt;- function(micro) { rownames(micro) &lt;- micro$Sample_ID micro$Sample_ID &lt;- NULL # micro &lt;- sqrt(micro) # can be toggled on/off micro_gb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Gb&quot;), ] micro_sf &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Sf&quot;), ] micro_wb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Wb&quot;), ] micro_gb &lt;- micro_gb[, colSums(micro_gb != 0) &gt; 0] micro_sf &lt;- micro_sf[, colSums(micro_sf != 0) &gt; 0] micro_wb &lt;- micro_wb[, colSums(micro_wb != 0) &gt; 0] micros &lt;- list(gb = micro_gb, sf = micro_sf, wb = micro_wb) return(micros) } micro_ds &lt;- OTU_prep_sqrt(micro) overall_rabdc &lt;- function(micros) { mic &lt;- micros n &lt;- 0 k &lt;- dim(mic)[1] mic[&quot;rowsum&quot;] &lt;- apply(mic, 1, sum) while (n &lt; k) { n &lt;- n + 1 mic[n, ] &lt;- mic[n, ]/(mic$rowsum[n]) } mic$rowsum &lt;- NULL mic &lt;- data.frame(t(mic)) mic[&quot;avg_rel_abdc&quot;] &lt;- apply(mic, 1, mean) mic[&quot;occurrence&quot;] &lt;- ifelse(mic$avg &gt; 0.0025, &quot;common&quot;, &quot;rare&quot;) return(mic) } occurrence &lt;- lapply(micro_ds, overall_rabdc) # PHYLUM adonis_prep &lt;- function(taxonomy, occurrence) { occurrence$gb[&quot;XOTU&quot;] &lt;- rownames(occurrence$gb) occurrence$sf[&quot;XOTU&quot;] &lt;- rownames(occurrence$sf) occurrence$wb[&quot;XOTU&quot;] &lt;- rownames(occurrence$wb) tax &lt;- taxonomy[, c(&quot;OTU_ID&quot;, &quot;Phylum&quot;, &quot;Class&quot;)] n &lt;- 0 k &lt;- dim(tax)[1] tax[&quot;XOTU&quot;] &lt;- NA while (n &lt; k) { n &lt;- n + 1 tax$XOTU[n] &lt;- paste0(&quot;X&quot;, tax$OTU_ID[n]) } tax_gb &lt;- inner_join(tax, occurrence$gb) tax_sf &lt;- inner_join(tax, occurrence$sf) tax_wb &lt;- inner_join(tax, occurrence$wb) taxes &lt;- list(gb = tax_gb, sf = tax_sf, wb = tax_wb) return(taxes) } taxes &lt;- adonis_prep(taxonomy, occurrence) cleaning &lt;- function(taxes) { gb &lt;- taxes$gb sf &lt;- taxes$sf wb &lt;- taxes$wb # Renaming &amp; removing whitespaces gb$Phylum &lt;- as.character(str_trim(as.character(gb$Phylum))) sf$Phylum &lt;- as.character(str_trim(as.character(sf$Phylum))) wb$Phylum &lt;- as.character(str_trim(as.character(wb$Phylum))) gb$Class &lt;- as.character(str_trim(as.character(gb$Class))) sf$Class &lt;- as.character(str_trim(as.character(sf$Class))) wb$Class &lt;- as.character(str_trim(as.character(wb$Class))) ## GB gb$Class[(gb$Phylum == &quot;PAUC34f&quot;)] &lt;- &quot;PAUC34f_unclassified&quot; gb$Class[(gb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; gb$Phylum[(gb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; gb$Class[(gb$Phylum == &quot;Tectomicrobia&quot;)] &lt;- &quot;Tectomicrobia_unclassified&quot; gb$Class[(gb$Phylum == &quot;SBR1093&quot;)] &lt;- &quot;SBR1093_unclassified&quot; gb$Class[(gb$Phylum == &quot;Poribacteria&quot;)] &lt;- &quot;Poribacteria_unclassified&quot; gb$Class[gb$Phylum == &quot;Chloroflexi&quot; &amp; gb$Class == &quot;&quot;] &lt;- &quot;Chloroflexi_unclassified&quot; ## SF sf$Class[(sf$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; sf$Phylum[(sf$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; sf$Class[(sf$Phylum == &quot;PAUC34f&quot;)] &lt;- &quot;PAUC34f_unclassified&quot; sf$Class[(sf$Phylum == &quot;Proteobacteria&quot; &amp; sf$Class == &quot;&quot;)] &lt;- &quot;Proteobacteria_unclassified&quot; sf$Class[(sf$Phylum == &quot;Tectomicrobia&quot;)] &lt;- &quot;Tectomicrobia_unclassified&quot; sf$Class[(sf$Phylum == &quot;SBR1093&quot;)] &lt;- &quot;SBR1093_unclassified&quot; sf$Class[(sf$Phylum == &quot;Poribacteria&quot;)] &lt;- &quot;Poribacteria_unclassified&quot; ## WB wb$Class[(wb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; wb$Phylum[(wb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; # merge back taxes &lt;- list(gb = gb, sf = sf, wb = wb) return(taxes) } taxes &lt;- cleaning(taxes) taxes &lt;- lapply(taxes, function(x) { rownames(x) &lt;- x$XOTU x }) taxes &lt;- lapply(taxes, function(x) { x[c(&quot;avg_rel_abdc&quot;, &quot;occurrence&quot;, &quot;OTU_ID&quot;, &quot;XOTU&quot;)] &lt;- NULL x }) taxes &lt;- lapply(taxes, function(x) { x[&quot;Class&quot;] &lt;- NULL x }) # aggregate sum of relative abundance per phylum in each sponge sample gb &lt;- aggregate(taxes$gb[, 2:dim(taxes$gb)[2]], list(taxes$gb[, &quot;Phylum&quot;]), sum) #works sf &lt;- aggregate(taxes$sf[, 2:dim(taxes$sf)[2]], list(taxes$sf[, &quot;Phylum&quot;]), sum) #works wb &lt;- aggregate(taxes$wb[, 2:dim(taxes$wb)[2]], list(taxes$wb[, &quot;Phylum&quot;]), sum) #works taxes_phy &lt;- full_join(gb, sf) taxes_phy &lt;- full_join(taxes_phy, wb) taxes_phy[is.na(taxes_phy)] &lt;- 0 # check there are no weird names aggregate(.~ Group.1, data=taxes_phy, sum) rownames(taxes_phy) &lt;- taxes_phy$Group.1 taxes_phy$Group.1 &lt;- NULL df_phylum &lt;- data.frame(t(taxes_phy)) #taxes_phy_t &lt;- df_phylum df_phylum[&quot;Sample_ID&quot;] &lt;- rownames(df_phylum) df_phylum &lt;- melt(df_phylum, id.vars = c(&quot;Sample_ID&quot;)) colnames(df_phylum) &lt;- c(&quot;Sample_ID&quot;, &quot;Phylum&quot;, &quot;variable&quot;) ggplot(df_phylum, aes(x = Sample_ID, y = variable, fill = Phylum)) + geom_bar(stat = &quot;identity&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = &quot;bottom&quot;) + xlab(&quot;Samples ordered by depth&quot;) + ylab(&quot;Relative abundance&quot;) + scale_x_discrete(limits = c(&quot;Gb1&quot;, &quot;Gb2&quot;, &quot;Gb3&quot;, &quot;Gb4&quot;, &quot;Gb5&quot;, &quot;Gb6&quot;, &quot;Gb7&quot;, &quot;Gb8&quot;, &quot;Gb9&quot;, &quot;Gb10&quot;, &quot;Gb11&quot;, &quot;Gb12&quot;, &quot;Gb13&quot;, &quot;Gb14&quot;, &quot;Sf1&quot;, &quot;Sf2&quot;, &quot;Sf3&quot;, &quot;Sf4&quot;, &quot;Sf5&quot;, &quot;Sf6&quot;, &quot;Sf7&quot;, &quot;Sf8&quot;, &quot;Sf9&quot;, &quot;Sf10&quot;, &quot;Sf11&quot;, &quot;Sf12&quot;, &quot;Sf13&quot;, &quot;Sf14&quot;, &quot;Sf15&quot;, &quot;Wb1&quot;, &quot;Wb2&quot;, &quot;Wb3&quot;, &quot;Wb4&quot;, &quot;Wb5&quot;, &quot;Wb6&quot;, &quot;Wb7&quot;, &quot;Wb8&quot;, &quot;Wb9&quot;, &quot;Wb10&quot;, &quot;Wb11&quot;, &quot;Wb12&quot;, &quot;Wb13&quot;, &quot;Wb14&quot;, &quot;Wb15&quot;, &quot;Wb16&quot;)) + scale_fill_manual(&quot;&quot;, breaks = c(&quot;Acidobacteria&quot;, &quot;Actinobacteria&quot;, &quot;Bacteroidetes&quot;, &quot;Chlamydiae&quot;, &quot;Chloroflexi&quot;, &quot;Cyanobacteria&quot;, &quot;Deferribacteres&quot;, &quot;Deinococcus.Thermus&quot;, &quot;Firmicutes&quot;, &quot;Gemmatimonadetes&quot;, &quot;Nitrospinae&quot;, &quot;Nitrospirae&quot;, &quot;PAUC34f&quot;, &quot;Planctomycetes&quot;, &quot;Poribacteria&quot;, &quot;Proteobacteria&quot;, &quot;SBR1093&quot;, &quot;Spirochaetae&quot;, &quot;Tectomicrobia&quot;, &quot;Thaumarchaeota&quot;, &quot;unclassified&quot;, &quot;Verrucomicrobia&quot;), values = c(&quot;#b8c4f6&quot;, &quot;#ffaaaf&quot;, &quot;#3d1349&quot;, &quot;#B6B2A9&quot;, &quot;#01559d&quot;, &quot;#CACAC8&quot;, &quot;#E1DED7&quot;, &quot;#CEC7C1&quot;, &quot;#9A9B9D&quot;, &quot;#019c51&quot;, &quot;#b10060&quot;, &quot;#49ca00&quot;, &quot;#dd8e00&quot;, &quot;#f282ff&quot;, &quot;#AFA79D&quot;, &quot;#ff633f&quot;, &quot;#ec0040&quot;, &quot;#010b92&quot;, &quot;#cf00aa&quot;, &quot;#aba900&quot;, &quot;#ffffff&quot;, &quot;#fce300&quot;), labels = c(&quot;Acidobacteria&quot;, &quot;Actinobacteria&quot;, &quot;Bacteroidetes&quot;, &quot;Chlamydiae&quot;, &quot;Chloroflexi&quot;, &quot;Cyanobacteria&quot;, &quot;Deferribacteres&quot;, &quot;Deinococcus.Thermus&quot;, &quot;Firmicutes&quot;, &quot;Gemmatimonadetes&quot;, &quot;Nitrospinae&quot;, &quot;Nitrospirae&quot;, &quot;PAUC34f&quot;, &quot;Planctomycetes&quot;, &quot;Poribacteria&quot;, &quot;Proteobacteria&quot;, &quot;SBR1093&quot;, &quot;Spirochaetae&quot;, &quot;Tectomicrobia&quot;, &quot;Thaumarchaeota&quot;, &quot;unclassified&quot;, &quot;Verrucomicrobia&quot;)) Figure 3.11: Relative abundance of prokaryotic phyla per sponge sample. # facet df_phylum[&#39;spec&#39;] &lt;- str_sub(df_phylum$Sample_ID,1,2) md &lt;- # meta_data[,c(&#39;unified_ID&#39;, &#39;Depth&#39;)] colnames(md) &lt;- c(&#39;Sample_ID&#39;, &#39;Depth&#39;) # df_phylum &lt;- left_join(df_phylum, md) # ggplot(df_phylum, aes(x=as.factor(Depth), y=variable, # fill=Phylum))+geom_bar(stat=&#39;identity&#39;)+facet_wrap(.~spec, # scales=&#39;free&#39;)+theme_classic()+theme(axis.text.x = element_text(angle = 90, # hjust = 1),legend.position = &#39;bottom&#39;)+xlab(&#39;Samples ordered by # depth&#39;)+ylab(&#39;Relative abundance&#39;)+scale_fill_manual(&#39;&#39;, breaks = # c(&#39;Acidobacteria&#39;, &#39;Actinobacteria&#39;, &#39;Bacteroidetes&#39;, &#39;Chlamydiae&#39;, # &#39;Chloroflexi&#39;, &#39;Cyanobacteria&#39;, &#39;Deferribacteres&#39;, &#39;Deinococcus.Thermus&#39;, # &#39;Firmicutes&#39;, &#39;Gemmatimonadetes&#39;, &#39;Nitrospinae&#39;, &#39;Nitrospirae&#39;, &#39;PAUC34f&#39;, # &#39;Planctomycetes&#39;, &#39;Poribacteria&#39;, &#39;Proteobacteria&#39;, &#39;SBR1093&#39;, &#39;Spirochaetae&#39;, # &#39;Tectomicrobia&#39;, &#39;Thaumarchaeota&#39;, &#39;unclassified&#39;, &#39;Verrucomicrobia&#39;), values = # c(&#39;#b8c4f6&#39;,&#39;#ffaaaf&#39;,&#39;#3d1349&#39;,&#39;#ffffff&#39;,&#39;#01559d&#39;,&#39;#ffffff&#39;,&#39;#ffffff&#39;,&#39;#ffffff&#39;,&#39;#ffffff&#39;,&#39;#019c51&#39;,&#39;#b10060&#39;,&#39;#49ca00&#39;,&#39;#dd8e00&#39;,&#39;#f282ff&#39;,&#39;#ffffff&#39;,&#39;#ff633f&#39;,&#39;#ec0040&#39;,&#39;#010b92&#39;,&#39;#cf00aa&#39;,&#39;#aba900&#39;,&#39;#ffffff&#39;,&#39;#fce300&#39;), # labels = c(&#39;Acidobacteria&#39;, &#39;Actinobacteria&#39;, &#39;Bacteroidetes&#39;, &#39;Chlamydiae&#39;, # &#39;Chloroflexi&#39;, &#39;Cyanobacteria&#39;, &#39;Deferribacteres&#39;, &#39;Deinococcus.Thermus&#39;, # &#39;Firmicutes&#39;, &#39;Gemmatimonadetes&#39;, &#39;Nitrospinae&#39;, &#39;Nitrospirae&#39;, &#39;PAUC34f&#39;, # &#39;Planctomycetes&#39;, &#39;Poribacteria&#39;, &#39;Proteobacteria&#39;, &#39;SBR1093&#39;, &#39;Spirochaetae&#39;, # &#39;Tectomicrobia&#39;, &#39;Thaumarchaeota&#39;, &#39;unclassified&#39;, &#39;Verrucomicrobia&#39;) ) We see in this bar plot that the relative abundance of phyla remains fairly stable across the different depths. Generally, the prokaryotic community of sponges is described as somewhat species specific and stable across virtually any measured gradient. At this taxonomic resolution, these findings hold true. The composition of the prokaryotic communities in the HMA sponges G. barretti and S. fortis is similar across all samples, while the composition in the LMA sponge W. bursa differs in composition but also displaying only minor variations in phyla proportions. The phyla left white/blank are present at very low abundance and we thought the figure might be visually easier without too many colours. The phyla Chloroflexi, Actinobacteria, Acidobacteria, PAUC34f, and Gemmatimonadetes were described as HMA indicator phyla (Moitinho-Silva et al. 2017) and are present in the HMA sponges G. barretti and S. fortis (although Actinobacteria are also present in W. bursa).The phyla Proteobacteria, Bacteroidetes, Planctomycetes, and Firmicutes were disgnated LMA indicator phyla and are found in W. bursa (although Proteobacteria are also present in the HMA sponges). 3.5.2 Tabular overview If you prefer numbers, this is what it breaks down to. You can sort the tables. microbiome &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) OTU_prep_sqrt &lt;- function(micro) { rownames(micro) &lt;- micro$Sample_ID micro$Sample_ID &lt;- NULL micro &lt;- sqrt(micro) micro_gb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Gb&quot;), ] micro_sf &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Sf&quot;), ] micro_wb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Wb&quot;), ] micro_gb &lt;- micro_gb[, colSums(micro_gb != 0) &gt; 0] micro_sf &lt;- micro_sf[, colSums(micro_sf != 0) &gt; 0] micro_wb &lt;- micro_wb[, colSums(micro_wb != 0) &gt; 0] micros &lt;- list(gb = micro_gb, sf = micro_sf, wb = micro_wb) return(micros) } micro_ds &lt;- OTU_prep_sqrt(microbiome) # calculate relative abundance of OTU across sponge samples overall_rabdc &lt;- function(micros) { mic &lt;- micros n &lt;- 0 k &lt;- dim(mic)[1] mic[&quot;rowsum&quot;] &lt;- apply(mic, 1, sum) while (n &lt; k) { n &lt;- n + 1 mic[n, ] &lt;- mic[n, ]/(mic$rowsum[n]) } mic$rowsum &lt;- NULL mic &lt;- data.frame(t(mic)) mic[&quot;avg_rel_abdc&quot;] &lt;- apply(mic, 1, mean) mic[&quot;occurrence&quot;] &lt;- ifelse(mic$avg &gt; 0.0025, &quot;common&quot;, &quot;rare&quot;) return(mic) } # gb_occurrence &lt;- overall_rabdc(micro_ds$gb) sf_occurrence &lt;- # overall_rabdc(micro_ds$sf) wb_occurrence &lt;- overall_rabdc(micro_ds$wb) # occurrence &lt;- list(gb=gb_occurrence, sf=sf_occurrence, wb=wb_occurrence) occurrence &lt;- lapply(micro_ds, overall_rabdc) aggregations &lt;- function(taxonomy, occurrence) { occurrence$gb[&quot;XOTU&quot;] &lt;- rownames(occurrence$gb) occurrence$sf[&quot;XOTU&quot;] &lt;- rownames(occurrence$sf) occurrence$wb[&quot;XOTU&quot;] &lt;- rownames(occurrence$wb) tax &lt;- taxonomy[, c(&quot;OTU_ID&quot;, &quot;Phylum&quot;, &quot;Class&quot;)] n &lt;- 0 k &lt;- dim(tax)[1] tax[&quot;XOTU&quot;] &lt;- NA while (n &lt; k) { n &lt;- n + 1 tax$XOTU[n] &lt;- paste0(&quot;X&quot;, tax$OTU_ID[n]) } tax_gb &lt;- inner_join(tax, occurrence$gb[, c(&quot;XOTU&quot;, &quot;avg_rel_abdc&quot;)]) tax_sf &lt;- inner_join(tax, occurrence$sf[, c(&quot;XOTU&quot;, &quot;avg_rel_abdc&quot;)]) tax_wb &lt;- inner_join(tax, occurrence$wb[, c(&quot;XOTU&quot;, &quot;avg_rel_abdc&quot;)]) taxes &lt;- list(gb = tax_gb, sf = tax_sf, wb = tax_wb) gb1 &lt;- aggregate(tax_gb$Phylum, by = list(tax_gb$Phylum), FUN = &quot;length&quot;) gb2 &lt;- aggregate(tax_gb$avg_rel_abdc, by = list(tax_gb$Phylum), FUN = &quot;sum&quot;) gb_p &lt;- full_join(gb1, gb2, by = (&quot;Group.1&quot; = &quot;Group.1&quot;)) colnames(gb_p) &lt;- c(&quot;Phylum&quot;, &quot;OTU_number&quot;, &quot;avg_rel_abdc&quot;) gb1 &lt;- aggregate(tax_gb$Class, by = list(tax_gb$Class), FUN = &quot;length&quot;) gb2 &lt;- aggregate(tax_gb$avg_rel_abdc, by = list(tax_gb$Class), FUN = &quot;sum&quot;) gb_c &lt;- full_join(gb1, gb2, by = (&quot;Group.1&quot; = &quot;Group.1&quot;)) colnames(gb_c) &lt;- c(&quot;Class&quot;, &quot;OTU_number&quot;, &quot;avg_rel_abdc&quot;) test1 &lt;- lapply(taxes, function(x) aggregate(avg_rel_abdc ~ Phylum, data = x, FUN = &quot;length&quot;)) lapply(taxes, function(x) aggregate(avg_rel_abdc ~ Phylum, data = x, FUN = &quot;sum&quot;)) return(taxes) } taxes &lt;- aggregations(taxonomy, occurrence) cleaning &lt;- function(taxes) { gb &lt;- taxes$gb sf &lt;- taxes$sf wb &lt;- taxes$wb # Renaming &amp; removing whitespaces gb$Phylum &lt;- as.character(str_trim(as.character(gb$Phylum))) sf$Phylum &lt;- as.character(str_trim(as.character(sf$Phylum))) wb$Phylum &lt;- as.character(str_trim(as.character(wb$Phylum))) gb$Class &lt;- as.character(str_trim(as.character(gb$Class))) sf$Class &lt;- as.character(str_trim(as.character(sf$Class))) wb$Class &lt;- as.character(str_trim(as.character(wb$Class))) ## GB gb$Class[(gb$Phylum == &quot;PAUC34f&quot;)] &lt;- &quot;PAUC34f_unclassified&quot; gb$Class[(gb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; gb$Phylum[(gb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; gb$Class[(gb$Phylum == &quot;Tectomicrobia&quot;)] &lt;- &quot;Tectomicrobia_unclassified&quot; gb$Class[(gb$Phylum == &quot;SBR1093&quot;)] &lt;- &quot;SBR1093_unclassified&quot; gb$Class[(gb$Phylum == &quot;Poribacteria&quot;)] &lt;- &quot;Poribacteria_unclassified&quot; gb$Class[gb$Phylum == &quot;Chloroflexi&quot; &amp; gb$Class == &quot;&quot;] &lt;- &quot;Chloroflexi_unclassified&quot; ## SF sf$Class[(sf$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; sf$Phylum[(sf$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; sf$Class[(sf$Phylum == &quot;PAUC34f&quot;)] &lt;- &quot;PAUC34f_unclassified&quot; sf$Class[(sf$Phylum == &quot;Proteobacteria&quot; &amp; sf$Class == &quot;&quot;)] &lt;- &quot;Proteobacteria_unclassified&quot; sf$Class[(sf$Phylum == &quot;Tectomicrobia&quot;)] &lt;- &quot;Tectomicrobia_unclassified&quot; sf$Class[(sf$Phylum == &quot;SBR1093&quot;)] &lt;- &quot;SBR1093_unclassified&quot; sf$Class[(sf$Phylum == &quot;Poribacteria&quot;)] &lt;- &quot;Poribacteria_unclassified&quot; ## WB wb$Class[(wb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; wb$Phylum[(wb$Phylum == &quot;&quot;)] &lt;- &quot;unclassified&quot; # merge back taxes &lt;- list(gb = gb, sf = sf, wb = wb) return(taxes) } taxes &lt;- cleaning(taxes) phy_OTU &lt;- lapply(taxes, function(x) aggregate(avg_rel_abdc ~ Phylum, data = x, FUN = &quot;length&quot;)) #OTU count phy_rabdc &lt;- lapply(taxes, function(x) aggregate(avg_rel_abdc ~ Phylum, data = x, FUN = &quot;sum&quot;)) #sums relative abundance class_OTU &lt;- lapply(taxes, function(x) aggregate(avg_rel_abdc ~ Class, data = x, FUN = &quot;length&quot;)) class_rabdc &lt;- lapply(taxes, function(x) aggregate(avg_rel_abdc ~ Class, data = x, FUN = &quot;sum&quot;)) 3.5.2.1 G. barretti: Phyla and classes present # https://rstudio.github.io/DT/ gb_P &lt;- cbind(phy_OTU$gb, phy_rabdc$gb[, (&quot;avg_rel_abdc&quot;)]) colnames(gb_P) &lt;- c(&quot;Phylum&quot;, &quot;OTU count&quot;, &quot;cum. avg. abundance&quot;) # gb_P$`cummulative average abundance` &lt;- round(c(gb_P$`cummulative average # abundance`, 6)) DT::datatable(gb_P, rownames = FALSE) gb_C &lt;- cbind(class_OTU$gb, class_rabdc$gb[, (&quot;avg_rel_abdc&quot;)]) colnames(gb_C) &lt;- c(&quot;Class&quot;, &quot;OTU count&quot;, &quot;cummulative average abundance&quot;) # gb_C$`cummulative average abundance` &lt;- round(c(gb_C$`cummulative average # abundance`, digits = 6)) DT::datatable(gb_C, rownames = FALSE) 3.5.2.2 S. fortis: Phyla and classes present sf_P &lt;- cbind(phy_OTU$sf, phy_rabdc$sf[, (&quot;avg_rel_abdc&quot;)]) colnames(sf_P) &lt;- c(&quot;Phylum&quot;, &quot;OTU count&quot;, &quot;cum. avg. abundance&quot;) # sf_P$`cummulative average abundance` &lt;- round(c(sf_P$`cummulative average # abundance`, digits = 6)) DT::datatable(sf_P, rownames = FALSE) sf_C &lt;- cbind(class_OTU$sf, class_rabdc$sf[, (&quot;avg_rel_abdc&quot;)]) colnames(sf_C) &lt;- c(&quot;Class&quot;, &quot;OTU count&quot;, &quot;cummulative average abundance&quot;) # sf_C$`cummulative average abundance` &lt;- round(c(sf_C$`cummulative average # abundance`, digits = 6)) DT::datatable(sf_C, rownames = FALSE) 3.5.2.3 W. bursa: Phyla and classes present wb_P &lt;- cbind(phy_OTU$wb, phy_rabdc$wb[, (&quot;avg_rel_abdc&quot;)]) colnames(wb_P) &lt;- c(&quot;Phylum&quot;, &quot;OTU count&quot;, &quot;cummulative average abundance&quot;) # wb_P$`cummulative average abundance` &lt;- round(c(wb_P$`cummulative average # abundance`, digits = 6)) DT::datatable(wb_P, rownames = FALSE) wb_C &lt;- cbind(class_OTU$wb, class_rabdc$wb[, (&quot;avg_rel_abdc&quot;)]) colnames(wb_C) &lt;- c(&quot;Class&quot;, &quot;OTU count&quot;, &quot;cummulative average abundance&quot;) # wb_C$`cummulative average abundance` &lt;- round(c(wb_C$`cummulative average # abundance`, digits = 6)) DT::datatable(wb_C, rownames = FALSE) rm(gb_P, sf_P, wb_P, gb_C, sf_C, wb_C) 3.5.3 Statistical comparison at phylum and class level # Is this valid??? ======================= Testing differences at phylum and # class level =========== micro_ds &lt;- OTU_prep_sqrt(micro) occurrence &lt;- lapply(micro_ds, overall_rabdc) # PHYLUM taxes &lt;- adonis_prep(taxonomy, occurrence) taxes &lt;- cleaning(taxes) taxes &lt;- lapply(taxes, function(x) { rownames(x) &lt;- x$XOTU x }) taxes &lt;- lapply(taxes, function(x) { x[c(&quot;avg_rel_abdc&quot;, &quot;occurrence&quot;, &quot;OTU_ID&quot;, &quot;XOTU&quot;)] &lt;- NULL x }) taxes &lt;- lapply(taxes, function(x) { x[&quot;Class&quot;] &lt;- NULL x }) gb &lt;- aggregate(taxes$gb[, 2:dim(taxes$gb)[2]], list(taxes$gb[, &quot;Phylum&quot;]), sum) #works sf &lt;- aggregate(taxes$sf[, 2:dim(taxes$sf)[2]], list(taxes$sf[, &quot;Phylum&quot;]), sum) #works wb &lt;- aggregate(taxes$wb[, 2:dim(taxes$wb)[2]], list(taxes$wb[, &quot;Phylum&quot;]), sum) #works taxes_phy &lt;- full_join(gb, sf) taxes_phy &lt;- full_join(taxes_phy, wb) taxes_phy[is.na(taxes_phy)] &lt;- 0 # aggregate(.~ Group.1, data=taxes_phy, sum) # check there are no weird names rownames(taxes_phy) &lt;- taxes_phy$Group.1 taxes_phy$Group.1 &lt;- NULL taxes_phy_t &lt;- data.frame(t(taxes_phy)) specs &lt;- data.frame(rownames(taxes_phy_t)) colnames(specs) &lt;- c(&quot;Sample_ID&quot;) specs[&quot;species&quot;] &lt;- str_sub(specs$Sample_ID, 1, 2) # Permutational ANOVA head(taxes_phy_t) head(specs$species) adonis(taxes_phy_t ~ specs$species) #all three species //significant ## ## Call: ## adonis(formula = taxes_phy_t ~ specs$species) ## ## Permutation: free ## Number of permutations: 999 ## ## Terms added sequentially (first to last) ## ## Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) ## specs$species 2 5.3650 2.68251 191.89 0.90136 0.001 *** ## Residuals 42 0.5871 0.01398 0.09864 ## Total 44 5.9522 1.00000 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 adonis(taxes_phy_t[c(1:29), ] ~ specs[c(1:29), 2]) #only Gb and Sf //significant ## ## Call: ## adonis(formula = taxes_phy_t[c(1:29), ] ~ specs[c(1:29), 2]) ## ## Permutation: free ## Number of permutations: 999 ## ## Terms added sequentially (first to last) ## ## Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) ## specs[c(1:29), 2] 1 0.06053 0.060525 4.9836 0.15582 0.001 *** ## Residuals 27 0.32791 0.012145 0.84418 ## Total 28 0.38844 1.00000 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Compare variation of relative abundance of each phylum/class among/within the # two/three groups ANOVA (three groups) apply(taxes_phy_t, 2, function(x) { summary(aov(x ~ specs$species)) }) ## $Acidobacteria ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.6565 0.3282 229.5 &lt;2e-16 *** ## Residuals 42 0.0601 0.0014 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Actinobacteria ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.01689 0.008443 18.54 1.7e-06 *** ## Residuals 42 0.01913 0.000455 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Bacteroidetes ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.003691 0.0018457 4.537 0.0164 * ## Residuals 42 0.017086 0.0004068 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Chloroflexi ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.7902 0.3951 191.9 &lt;2e-16 *** ## Residuals 42 0.0865 0.0021 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Deinococcus.Thermus ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 7.593e-05 3.797e-05 12.38 5.94e-05 *** ## Residuals 42 1.288e-04 3.070e-06 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Gemmatimonadetes ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.06843 0.03422 105.6 &lt;2e-16 *** ## Residuals 42 0.01361 0.00032 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Nitrospinae ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.006483 0.003241 18.89 1.41e-06 *** ## Residuals 42 0.007206 0.000172 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Nitrospirae ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.0014477 0.0007239 65.62 1.19e-13 *** ## Residuals 42 0.0004633 0.0000110 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $PAUC34f ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.008917 0.004458 195.3 &lt;2e-16 *** ## Residuals 42 0.000959 0.000023 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Poribacteria ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.0004639 2.320e-04 16.66 4.7e-06 *** ## Residuals 42 0.0005846 1.392e-05 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Proteobacteria ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 2.2811 1.1406 541.3 &lt;2e-16 *** ## Residuals 42 0.0885 0.0021 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $SBR1093 ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.004207 0.002103 36.91 5.61e-10 *** ## Residuals 42 0.002393 0.000057 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Spirochaetae ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.001742 0.0008709 20.93 4.93e-07 *** ## Residuals 42 0.001747 0.0000416 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Tectomicrobia ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.0006355 0.0003177 18.22 2.01e-06 *** ## Residuals 42 0.0007325 0.0000174 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Thaumarchaeota ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.04931 0.024655 13.82 2.45e-05 *** ## Residuals 42 0.07495 0.001784 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $unclassified ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.0001545 7.727e-05 2.67 0.081 . ## Residuals 42 0.0012156 2.894e-05 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Verrucomicrobia ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.009097 0.004549 30.41 6.84e-09 *** ## Residuals 42 0.006282 0.000150 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Deferribacteres ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 3.190e-07 1.593e-07 1 0.376 ## Residuals 42 6.691e-06 1.593e-07 ## ## $Firmicutes ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 1.028e-06 5.138e-07 1 0.376 ## Residuals 42 2.158e-05 5.138e-07 ## ## $Planctomycetes ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.11325 0.05663 48.02 1.41e-11 *** ## Residuals 42 0.04953 0.00118 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## $Chlamydiae ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 2.60e-06 1.30e-06 0.902 0.413 ## Residuals 42 6.05e-05 1.44e-06 ## ## $Cyanobacteria ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## specs$species 2 0.0002481 1.241e-04 2.658 0.0819 . ## Residuals 42 0.0019605 4.668e-05 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # of course they&#39;re all different, this includes Weberella. # Mann-Whittney U aka Wilcoxon rank sum test(two groups, gb vs sf) gbsf_phy &lt;- taxes_phy_t[c(1:29), ] gbsf_spec &lt;- specs[c(1:29), ] apply(gbsf_phy, 2, function(x) { wilcox.test(x ~ gbsf_spec$species) }) ## $Acidobacteria ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 140, p-value = 0.1337 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Actinobacteria ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 146, p-value = 0.07692 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Bacteroidetes ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 36, p-value = 0.001906 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Chloroflexi ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 62, p-value = 0.06295 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Deinococcus.Thermus ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 115, p-value = 0.6721 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Gemmatimonadetes ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 172, p-value = 0.002676 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Nitrospinae ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 44.5, p-value = 0.00882 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Nitrospirae ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 78, p-value = 0.2517 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $PAUC34f ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 6, p-value = 7.736e-07 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Poribacteria ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 37.5, p-value = 0.002422 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Proteobacteria ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 141, p-value = 0.1225 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $SBR1093 ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 148, p-value = 0.06295 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Spirochaetae ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 10, p-value = 2.831e-05 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Tectomicrobia ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 60, p-value = 0.05111 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Thaumarchaeota ## ## Wilcoxon rank sum test ## ## data: x by gbsf_spec$species ## W = 113, p-value = 0.7472 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $unclassified ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 184, p-value = 0.0005937 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Verrucomicrobia ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 43, p-value = 0.002676 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Deferribacteres ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 98, p-value = 0.3697 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Firmicutes ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 98, p-value = 0.3697 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Planctomycetes ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 91, p-value = 0.18 ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Chlamydiae ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 105, p-value = NA ## alternative hypothesis: true location shift is not equal to 0 ## ## ## $Cyanobacteria ## ## Wilcoxon rank sum test with continuity correction ## ## data: x by gbsf_spec$species ## W = 105, p-value = NA ## alternative hypothesis: true location shift is not equal to 0 apply(gbsf_phy, 2, function(x) { (wilcox.test(x ~ gbsf_spec$species))[&quot;p.value&quot;] }) #This is really the result we want ## $Acidobacteria ## $Acidobacteria$p.value ## [1] 0.1336997 ## ## ## $Actinobacteria ## $Actinobacteria$p.value ## [1] 0.07691902 ## ## ## $Bacteroidetes ## $Bacteroidetes$p.value ## [1] 0.00190609 ## ## ## $Chloroflexi ## $Chloroflexi$p.value ## [1] 0.06295335 ## ## ## $Deinococcus.Thermus ## $Deinococcus.Thermus$p.value ## [1] 0.6720729 ## ## ## $Gemmatimonadetes ## $Gemmatimonadetes$p.value ## [1] 0.002675546 ## ## ## $Nitrospinae ## $Nitrospinae$p.value ## [1] 0.008820418 ## ## ## $Nitrospirae ## $Nitrospirae$p.value ## [1] 0.2517123 ## ## ## $PAUC34f ## $PAUC34f$p.value ## [1] 7.73607e-07 ## ## ## $Poribacteria ## $Poribacteria$p.value ## [1] 0.002422207 ## ## ## $Proteobacteria ## $Proteobacteria$p.value ## [1] 0.122524 ## ## ## $SBR1093 ## $SBR1093$p.value ## [1] 0.06295335 ## ## ## $Spirochaetae ## $Spirochaetae$p.value ## [1] 2.83097e-05 ## ## ## $Tectomicrobia ## $Tectomicrobia$p.value ## [1] 0.05110881 ## ## ## $Thaumarchaeota ## $Thaumarchaeota$p.value ## [1] 0.7471924 ## ## ## $unclassified ## $unclassified$p.value ## [1] 0.0005936685 ## ## ## $Verrucomicrobia ## $Verrucomicrobia$p.value ## [1] 0.002675589 ## ## ## $Deferribacteres ## $Deferribacteres$p.value ## [1] 0.3696734 ## ## ## $Firmicutes ## $Firmicutes$p.value ## [1] 0.3696734 ## ## ## $Planctomycetes ## $Planctomycetes$p.value ## [1] 0.1799903 ## ## ## $Chlamydiae ## $Chlamydiae$p.value ## [1] NaN ## ## ## $Cyanobacteria ## $Cyanobacteria$p.value ## [1] NaN # CLASS micro_ds &lt;- OTU_prep_sqrt(micro) occurrence &lt;- lapply(micro_ds, overall_rabdc) taxes &lt;- adonis_prep(taxonomy, occurrence) taxes &lt;- cleaning(taxes) taxes &lt;- lapply(taxes, function(x) { rownames(x) &lt;- x$XOTU x }) taxes &lt;- lapply(taxes, function(x) { x[c(&quot;avg_rel_abdc&quot;, &quot;occurrence&quot;, &quot;OTU_ID&quot;, &quot;XOTU&quot;)] &lt;- NULL x }) 3.6 Depth response: OTU perspective Summarising the OTU diversity by phylum or class only shows what was previously known. The composition of the sponges’ prokaryotic community is stable. However, summarising doesn’t do the data justice. We therefore correlate the average relative abundance of every OTU with depth. The Otus yielding a significant correlation with depth are shown by their respecive relative abundance across the depths. # ====================== INC-DEC CORRELATION ================== Categorises the # OTUs by their response to depth. micro &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) meta_data &lt;- read.csv(&quot;data/Steffen_et_al_metadata_PANGAEA.csv&quot;, header = T, sep = &quot;;&quot;) meta_data_prep &lt;- function(meta_data) { meta_data &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;, &quot;Latitude&quot;, &quot;Longitude&quot;, &quot;MeanBottomTemp_Cdeg&quot;, &quot;MeanBotSalinity_PSU&quot;, &quot;YEAR&quot;)] colnames(meta_data) &lt;- c(&quot;unified_ID&quot;, &quot;Depth&quot;, &quot;Latitude&quot;, &quot;Longitude&quot;, &quot;Temperature&quot;, &quot;Salinity&quot;, &quot;Year&quot;) meta_data &lt;- meta_data[!(str_sub(meta_data$unified_ID, 1, 2) == &quot;QC&quot;), ] meta_data[] &lt;- lapply(meta_data, function(x) if (is.factor(x)) factor(x) else x) # Gb12, Gb20 and Gb21 are missing temperature and salinity. Imputing data from # closeby samples: meta_data$Salinity[meta_data$unified_ID == &quot;Gb12&quot;] &lt;- 34.92 meta_data$Salinity[meta_data$unified_ID == &quot;Gb20&quot;] &lt;- 34.92 meta_data$Salinity[meta_data$unified_ID == &quot;Gb21&quot;] &lt;- 34.56 meta_data$Temperature[meta_data$unified_ID == &quot;Gb12&quot;] &lt;- 3.71 meta_data$Temperature[meta_data$unified_ID == &quot;Gb20&quot;] &lt;- 3.65 meta_data$Temperature[meta_data$unified_ID == &quot;Gb21&quot;] &lt;- 2.32 meta_data[&quot;spec&quot;] &lt;- str_sub(meta_data$unified_ID, 1, 2) meta_data &lt;- meta_data[order(meta_data$unified_ID), ] return(meta_data) } meta_data &lt;- meta_data_prep(meta_data) OTU_prep_sqrt &lt;- function(micro) { rownames(micro) &lt;- micro$Sample_ID micro$Sample_ID &lt;- NULL micro &lt;- sqrt(micro) #sqrt could be toggled on/off here micro_gb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Gb&quot;), ] micro_sf &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Sf&quot;), ] micro_wb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Wb&quot;), ] micro_gb &lt;- micro_gb[, colSums(micro_gb != 0) &gt; 0] micro_sf &lt;- micro_sf[, colSums(micro_sf != 0) &gt; 0] micro_wb &lt;- micro_wb[, colSums(micro_wb != 0) &gt; 0] micros &lt;- list(gb = micro_gb, sf = micro_sf, wb = micro_wb) return(micros) } micro_ds &lt;- OTU_prep_sqrt(micro) ### overall_rabdc &lt;- function(micros) { mic &lt;- micros n &lt;- 0 k &lt;- dim(mic)[1] mic[&quot;rowsum&quot;] &lt;- apply(mic, 1, sum) while (n &lt; k) { n &lt;- n + 1 mic[n, ] &lt;- mic[n, ]/(mic$rowsum[n]) } mic$rowsum &lt;- NULL mic &lt;- data.frame(t(mic)) # mic[&#39;avg_rel_abdc&#39;] &lt;- apply(mic, 1, mean) mic[&#39;occurrence&#39;] &lt;- # ifelse(mic$avg&gt;0.0025, &#39;common&#39;, &#39;rare&#39;) return(mic) } rabdc &lt;- lapply(micro_ds, overall_rabdc) # CORRELATION inc_dec &lt;- function(rabdc_df, meta_data) { md &lt;- meta_data[meta_data$unified_ID %in% colnames(rabdc_df), ] inc_dec &lt;- data.frame(rownames(rabdc_df)) colnames(inc_dec) &lt;- &quot;XOTU&quot; inc_dec[&quot;inc_dec_estimate&quot;] &lt;- NA inc_dec[&quot;inc_dec_p_val&quot;] &lt;- NA inc_dec[&quot;fdr&quot;] &lt;- NA n &lt;- 0 k &lt;- dim(inc_dec)[1] while (n &lt; k) { n &lt;- n + 1 inc_dec$inc_dec_estimate[n] &lt;- cor.test(as.numeric(rabdc_df[n, ]), md$Depth)$estimate inc_dec$inc_dec_p_val[n] &lt;- cor.test(as.numeric(rabdc_df[n, ]), md$Depth)$p.value } inc_dec[&quot;classification&quot;] &lt;- NA inc_dec$classification[inc_dec$inc_dec_estimate &lt; 0] &lt;- &quot;dec.trend&quot; inc_dec$classification[inc_dec$inc_dec_estimate &gt; 0] &lt;- &quot;inc.trend&quot; inc_dec$classification[inc_dec$inc_dec_estimate &lt; 0 &amp; inc_dec$inc_dec_p &lt;= 0.05] &lt;- &quot;decreasing&quot; inc_dec$classification[inc_dec$inc_dec_estimate &gt; 0 &amp; inc_dec$inc_dec_p &lt;= 0.05] &lt;- &quot;increasing&quot; inc_dec$fdr &lt;- p.adjust(inc_dec$inc_dec_p_val, method = &quot;fdr&quot;) return(inc_dec) } response &lt;- lapply(rabdc, inc_dec, meta_data = meta_data) scale_viz &lt;- function(micro) { mic &lt;- micro mic[&quot;max&quot;] &lt;- apply(mic, 1, max) n &lt;- 0 k &lt;- dim(mic)[1] while (n &lt; k) { n &lt;- n + 1 mic[n, ] &lt;- mic[n, ]/(mic$max[n]) } mic$max &lt;- NULL return(mic) } rabdc &lt;- lapply(rabdc, scale_viz) #to scale between {0,1} for visualisation rabdc_gb &lt;- rabdc$gb rabdc_sf &lt;- rabdc$sf rabdc_wb &lt;- rabdc$wb gb_response &lt;- response$gb sf_response &lt;- response$sf wb_response &lt;- response$wb # gb rabdc_gb[&quot;XOTU&quot;] &lt;- rownames(rabdc_gb) gb_heatmap &lt;- full_join(rabdc_gb, gb_response) gb_heatmap &lt;- melt(gb_heatmap, id.vars = c(&quot;XOTU&quot;, &quot;inc_dec_estimate&quot;, &quot;inc_dec_p_val&quot;, &quot;classification&quot;)) md &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;)] colnames(md) &lt;- c(&quot;variable&quot;, &quot;Depth&quot;) gb_heatmap &lt;- left_join(gb_heatmap, md) gb_heatmap[&quot;name&quot;] &lt;- str_sub(gb_heatmap$XOTU, -3) gb_heatmap_i &lt;- gb_heatmap[gb_heatmap$classification == &quot;increasing&quot;, ] gb_heatmap_d &lt;- gb_heatmap[gb_heatmap$classification == &quot;decreasing&quot;, ] # gb_i &lt;- ggplot(gb_heatmap_i, aes(x=as.factor(gb_heatmap_i$Depth), # y=gb_heatmap_i$name, fill=gb_heatmap_i$value))+geom_tile()+ theme(axis.text.x = # element_text(angle = 90, hjust = 1))+xlab(&#39;Depth&#39;)+ylab(&#39;OTUs&#39;)+ggtitle(&#39;GB # OTUs increasing&#39;)+scale_fill_viridis_c(option = # &#39;plasma&#39;)+coord_equal()+theme(plot.background=element_blank(), # panel.border=element_blank(), # legend.title=element_blank(),legend.position=&#39;bottom&#39;) gb_d &lt;- # ggplot(gb_heatmap_d, aes(x=as.factor(gb_heatmap_d$Depth), y=gb_heatmap_d$name, # fill=gb_heatmap_d$value))+geom_tile()+ theme(axis.text.x = element_text(angle = # 90, hjust = 1))+xlab(&#39;Depth&#39;)+ylab(&#39;OTUs&#39;)+ggtitle(&#39;GB OTUs # decreasing&#39;)+scale_fill_viridis_c(option = # &#39;plasma&#39;)+coord_equal()+theme(plot.background=element_blank(), # panel.border=element_blank(), # legend.title=element_blank(),legend.position=&#39;bottom&#39;) # sf rabdc_sf[&quot;XOTU&quot;] &lt;- rownames(rabdc_sf) sf_heatmap &lt;- full_join(rabdc_sf, sf_response) sf_heatmap &lt;- melt(sf_heatmap, id.vars = c(&quot;XOTU&quot;, &quot;inc_dec_estimate&quot;, &quot;inc_dec_p_val&quot;, &quot;classification&quot;)) md &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;)] colnames(md) &lt;- c(&quot;variable&quot;, &quot;Depth&quot;) sf_heatmap &lt;- left_join(sf_heatmap, md) sf_heatmap[&quot;name&quot;] &lt;- str_sub(sf_heatmap$XOTU, -3) sf_heatmap_i &lt;- sf_heatmap[sf_heatmap$classification == &quot;increasing&quot;, ] sf_heatmap_d &lt;- sf_heatmap[sf_heatmap$classification == &quot;decreasing&quot;, ] # sf_i &lt;- ggplot(sf_heatmap_i, aes(x=as.factor(sf_heatmap_i$Depth), # y=sf_heatmap_i$name, fill=sf_heatmap_i$value))+geom_tile()+ theme(axis.text.x = # element_text(angle = 90, hjust = 1))+xlab(&#39;Depth&#39;)+ylab(&#39;OTUs&#39;)+ggtitle(&#39;SF # OTUs increasing&#39;)+scale_fill_viridis_c(option = # &#39;plasma&#39;)+coord_equal()+theme(plot.background=element_blank(), # panel.border=element_blank(), # legend.title=element_blank(),legend.position=&#39;bottom&#39;) sf_d &lt;- # ggplot(sf_heatmap_d, aes(x=as.factor(sf_heatmap_d$Depth), y=sf_heatmap_d$name, # fill=sf_heatmap_d$value))+geom_tile()+ theme(axis.text.x = element_text(angle = # 90, hjust = 1))+xlab(&#39;Depth&#39;)+ylab(&#39;OTUs&#39;)+ggtitle(&#39;SF OTUs # decreasing&#39;)+scale_fill_viridis_c(option = # &#39;plasma&#39;)+coord_equal()+theme(plot.background=element_blank(), # panel.border=element_blank(), # legend.title=element_blank(),legend.position=&#39;bottom&#39;) # wb rabdc_wb[&quot;XOTU&quot;] &lt;- rownames(rabdc_wb) wb_heatmap &lt;- full_join(rabdc_wb, wb_response) wb_heatmap &lt;- melt(wb_heatmap, id.vars = c(&quot;XOTU&quot;, &quot;inc_dec_estimate&quot;, &quot;inc_dec_p_val&quot;, &quot;classification&quot;)) md &lt;- meta_data[, c(&quot;unified_ID&quot;, &quot;Depth&quot;)] colnames(md) &lt;- c(&quot;variable&quot;, &quot;Depth&quot;) wb_heatmap &lt;- left_join(wb_heatmap, md) wb_heatmap[&quot;name&quot;] &lt;- str_sub(wb_heatmap$XOTU, -3) wb_heatmap_i &lt;- wb_heatmap[wb_heatmap$classification == &quot;increasing&quot;, ] wb_heatmap_d &lt;- wb_heatmap[wb_heatmap$classification == &quot;decreasing&quot;, ] # wb_i &lt;- ggplot(wb_heatmap_i, aes(x=as.factor(wb_heatmap_i$Depth), # y=wb_heatmap_i$name, fill=wb_heatmap_i$value))+geom_tile()+ theme(axis.text.x = # element_text(angle = 90, hjust = 1))+xlab(&#39;Depth&#39;)+ylab(&#39;OTUs&#39;)+ggtitle(&#39;WB # OTUs increasing&#39;)+scale_fill_viridis_c(option = # &#39;plasma&#39;)+coord_equal()+theme(plot.background=element_blank(), # panel.border=element_blank(), # legend.title=element_blank(),legend.position=&#39;bottom&#39;) wb_d &lt;- # ggplot(wb_heatmap_d, aes(x=as.factor(wb_heatmap_d$Depth), y=wb_heatmap_d$name, # fill=wb_heatmap_d$value))+geom_tile()+ theme(axis.text.x = element_text(angle = # 90, hjust = 1))+xlab(&#39;Depth&#39;)+ylab(&#39;OTUs&#39;)+ggtitle(&#39;WB OTUs # decreasing&#39;)+scale_fill_viridis_c(option = # &#39;plasma&#39;)+coord_equal()+theme(plot.background=element_blank(), # panel.border=element_blank(), # legend.title=element_blank(),legend.position=&#39;bottom&#39;) # Facetting for the figure in the publication gb_heatmap_i[&quot;spec&quot;] &lt;- c(&quot;Geodia barretti&quot;) sf_heatmap_i[&quot;spec&quot;] &lt;- c(&quot;Stryphnus fortis&quot;) wb_heatmap_i[&quot;spec&quot;] &lt;- c(&quot;Weberella bursa&quot;) increase &lt;- rbind(gb_heatmap_i, sf_heatmap_i, wb_heatmap_i) inc &lt;- ggplot(increase, aes(x = as.factor(Depth), y = name, fill = value)) + facet_grid(. ~ spec, space = &quot;free&quot;, scales = &quot;free&quot;) + geom_tile() + theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(&quot;Depth&quot;) + ylab(&quot;OTUs&quot;) + ggtitle(&quot;OTUs increasing&quot;) + scale_fill_viridis_c(option = &quot;plasma&quot;) + theme(plot.background = element_blank(), panel.border = element_blank(), legend.title = element_blank(), legend.position = &quot;bottom&quot;) gb_heatmap_d[&quot;spec&quot;] &lt;- c(&quot;Geodia barretti&quot;) sf_heatmap_d[&quot;spec&quot;] &lt;- c(&quot;Stryphnus fortis&quot;) wb_heatmap_d[&quot;spec&quot;] &lt;- c(&quot;Weberella bursa&quot;) decrease &lt;- rbind(gb_heatmap_d, sf_heatmap_d, wb_heatmap_d) dec &lt;- ggplot(decrease, aes(x = as.factor(Depth), y = name, fill = value)) + facet_grid(. ~ spec, space = &quot;free&quot;, scales = &quot;free&quot;, drop = T) + geom_tile() + theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(&quot;Depth&quot;) + ylab(&quot;OTUs&quot;) + ggtitle(&quot;OTUs decreasing&quot;) + scale_fill_viridis_c(option = &quot;plasma&quot;) + theme(plot.background = element_blank(), panel.border = element_blank(), legend.title = element_blank(), legend.position = &quot;bottom&quot;) library(gridExtra) grid.arrange(inc, dec, nrow = 1) Figure 3.12: OTUs significantly increasing and decreasing with depth in the three sponge species. gb_nums &lt;- c(length(unique(gb_heatmap$name)), length(unique(gb_heatmap_i$name)), length(unique(gb_heatmap_d$name))) sf_nums &lt;- c(length(unique(sf_heatmap$name)), length(unique(sf_heatmap_i$name)), length(unique(sf_heatmap_d$name))) wb_nums &lt;- c(length(unique(wb_heatmap$name)), length(unique(wb_heatmap_i$name)), length(unique(wb_heatmap_d$name))) overview &lt;- rbind(gb_nums, sf_nums, wb_nums) colnames(overview) &lt;- c(&quot;Total&quot;, &quot;increasing&quot;, &quot;decreasing&quot;) rownames(overview) &lt;- c(&quot;G. barretti microbiota&quot;, &quot;S. fortis microbiota&quot;, &quot;W. bursa microbiota&quot;) overview &lt;- data.frame(overview) overview[&quot;unaffected&quot;] &lt;- overview$Total - (overview$increasing + overview$decreasing) kable(overview, col.names = c(&quot;Total&quot;, &quot;N OTUs increasing&quot;, &quot;N OTUs decreasing&quot;, &quot;N OTUs unaffected&quot;), escape = F, align = &quot;c&quot;, booktabs = T, caption = &quot;Microbiota response to depth&quot;, &quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;hover&quot;, &quot;condensed&quot;, &quot;responsive&quot;, latex_options = &quot;striped&quot;, full_width = F)) Table 3.4: Microbiota response to depth Total N OTUs increasing N OTUs decreasing N OTUs unaffected G. barretti microbiota 420 86 63 271 S. fortis microbiota 461 62 37 362 W. bursa microbiota 135 12 11 112 write.csv(gb_response, &quot;data/gb_response.csv&quot;) write.csv(sf_response, &quot;data/sf_response.csv&quot;) write.csv(wb_response, &quot;data/wb_response.csv&quot;) In this Fig.3.12 as well as in Tab. 3.4, we see that at the OTU level, we observe shifts. While sometimes more gradual, there seem to OTUs exclusievely present in the “shallow” or the “deep” samples in all three sponges. In fact, in G. barretti and S. fortis, the number of OTUs increasing with depth (“deep water mass microbiome”) is greater than the number of OTUs decreasing. This leads us to believe that the deep water mass contains microbes yet to discover. 3.7 Sequence similarity library(seqinr) library(tidyverse) # fasta files generation micro &lt;- read.csv(&quot;data/OTU_all_R.csv&quot;, header = T, sep = &quot;;&quot;) fastas &lt;- read.fasta(&quot;data/all_otus_artic_691.fasta&quot;) split_fastas &lt;- function(micro, fastas) { rownames(micro) &lt;- micro$Sample_ID micro$Sample_ID &lt;- NULL micro_gb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Gb&quot;), ] micro_sf &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Sf&quot;), ] micro_wb &lt;- micro[(str_sub(rownames(micro), 1, 2) == &quot;Wb&quot;), ] micro_gb &lt;- micro_gb[, colSums(micro_gb != 0) &gt; 0] micro_sf &lt;- micro_sf[, colSums(micro_sf != 0) &gt; 0] micro_wb &lt;- micro_wb[, colSums(micro_wb != 0) &gt; 0] micro_gb &lt;- as.data.frame(colnames(micro_gb)) micro_sf &lt;- as.data.frame(colnames(micro_sf)) micro_wb &lt;- as.data.frame(colnames(micro_wb)) colnames(micro_gb) &lt;- c(&quot;XOTU&quot;) colnames(micro_sf) &lt;- c(&quot;XOTU&quot;) colnames(micro_wb) &lt;- c(&quot;XOTU&quot;) micro_gb[&quot;OTU&quot;] &lt;- str_sub(micro_gb$XOTU, 2, 13) micro_sf[&quot;OTU&quot;] &lt;- str_sub(micro_sf$XOTU, 2, 13) micro_wb[&quot;OTU&quot;] &lt;- str_sub(micro_wb$XOTU, 2, 13) gb_fastas &lt;- fastas[names(fastas) %in% micro_gb$OTU] sf_fastas &lt;- fastas[names(fastas) %in% micro_sf$OTU] wb_fastas &lt;- fastas[names(fastas) %in% micro_wb$OTU] fasta_sets &lt;- list(gb = gb_fastas, sf = sf_fastas, wb = wb_fastas) return(fasta_sets) } fasta_sets &lt;- split_fastas(micro, fastas) write.fasta(sequences = fasta_sets$gb, names = names(fasta_sets$gb), file.out = &quot;data/gb_OTU_seqs.fasta&quot;) write.fasta(sequences = fasta_sets$sf, names = names(fasta_sets$sf), file.out = &quot;data/sf_OTU_seqs.fasta&quot;) write.fasta(sequences = fasta_sets$wb, names = names(fasta_sets$wb), file.out = &quot;data/wb_OTU_seqs.fasta&quot;) rm(fatsta_sets, micro, fastas) We produced fasta files, i.e. files containing the DNA sequences of the OTUs in the three sponges. The fasta sequences were aligned with MAFFT. From the aligned seqeunces, we calculated the sequence similarity comparing all versus all, and retain in a file all comparisons yielding a sequence similarity \\(\\geq\\) 97%. # Load one set of files at a time ali &lt;- # read.alignment(&#39;data/gb_reads_for_phylogeny_MAFFT.fasta&#39;, &#39;fasta&#39;) anno &lt;- # read.csv(&#39;data/gb_OTUs_overall_rabdc_annotated.csv&#39;, header=T, sep=&#39;,&#39;) # ali &lt;- read.alignment(&#39;data/sf_reads_for_phylogeny_MAFFT.fasta&#39;, &#39;fasta&#39;) anno # &lt;- read.csv(&#39;data/sf_OTUs_overall_rabdc_annotated.csv&#39;, header=T, sep=&#39;,&#39;) # ali &lt;- read.alignment(&#39;data/wb_reads_for_phylogeny_MAFFT.fasta&#39;, &#39;fasta&#39;) anno # &lt;- read.csv(&#39;data/wb_OTUs_overall_rabdc_annotated.csv&#39;, header=T, sep=&#39;,&#39;) # FUN calculate pairwise distance, melt, keeps only entries with &gt;97% and &lt;1 # similarity with significant opposing trends in both partners. pw_dist &lt;- function(ali, anno) { dist &lt;- as.matrix(dist.alignment(ali, matrix = &quot;similarity&quot;)) #https://www.researchgate.net/post/Homology_similarity_and_identity-can_anyone_help_with_these_terms # dist.alignment: matrix contains the squared root of the pairwise distances. For # example, if identity between 2 sequences is 80 the squared root of (1.0 - 0.8) # i.e. 0.4472136. dist &lt;- dist^2 dist &lt;- 1 - dist # dist is now &#39;%&#39; identity, 1=100 % dist &lt;- melt(dist) # Remove irrelevant entries, i.e. self-comparison and similarities below the # threshold, this step now speeds up later steps, but not mandatory dist &lt;- dist[dist$value &gt;= 0.97, ] dist &lt;- dist[!dist$value == 1, ] # This removes AB - BA duplicates cols &lt;- c(&quot;Var1&quot;, &quot;Var2&quot;) newdf &lt;- dist[, cols] for (i in 1:nrow(newdf)) { newdf[i, ] = sort(newdf[i, cols]) } newdf &lt;- newdf[!duplicated(newdf), ] # add back similarity values to the remaining comparisons/pairs dist &lt;- left_join(newdf, dist, by = c(Var1 = &quot;Var1&quot;, Var2 = &quot;Var2&quot;)) # annotate OTUs anno[&quot;OTU_num&quot;] &lt;- str_replace(anno$XOTU, &quot;X&quot;, &quot;&quot;) anno &lt;- anno[, c(&quot;OTU_num&quot;, &quot;shallow_mean&quot;, &quot;deep_mean&quot;, &quot;ttest_pval&quot;, &quot;ttest_fdr&quot;)] anno[&quot;cat&quot;] &lt;- c(&quot;none&quot;) anno$cat[anno$ttest_fdr &lt; 0.05 &amp; anno$shallow_mean &gt; anno$deep_mean] &lt;- c(&quot;shallow&quot;) # can be set to &#39;ttest_pval&#39; instead anno$cat[anno$ttest_fdr &lt; 0.05 &amp; anno$shallow_mean &lt; anno$deep_mean] &lt;- c(&quot;deep&quot;) # can be set to &#39;ttest_pval&#39; instead anno &lt;- anno[, c(&quot;OTU_num&quot;, &quot;cat&quot;)] anno$OTU_num &lt;- as.numeric(anno$OTU_num) colnames(anno) &lt;- c(&quot;Var1&quot;, &quot;Var1_cat&quot;) dist &lt;- left_join(dist, anno) colnames(anno) &lt;- c(&quot;Var2&quot;, &quot;Var2_cat&quot;) dist &lt;- left_join(dist, anno) # remove not significant comparisons dist &lt;- dist[!dist$Var1_cat == &quot;none&quot; &amp; !dist$Var2_cat == &quot;none&quot; &amp; !dist$Var1_cat == dist$Var2_cat, ] # order dist &lt;- dist[order(dist$Var1_cat, dist$Var2_cat), ] return(dist) } dist &lt;- pw_dist(ali, anno) # create csv file write.csv(dist, &#39;data/gb_similarity.csv&#39;, row.names = F) # GB # write.csv(dist, &#39;data/sf_similarity.csv&#39;, row.names = F) # SF In W. bursa, none # of the OTUs are different (ttest_fdr &lt; 0.05) comparing shallow and deep # specimens rm(ali, anno, dist) In the G. barretti prokaryotic community, there are 19 pairs of OTUs with a sequence similarity \\(\\geq\\) 97% and difference in abundance above/below 1000 m (p FDR \\(\\leq\\) 0.05). In the S. fortis prokaryotic community, there are 2 pairs of OTUs with a sequence similarity \\(\\geq\\) 97% and difference in abundance above/below 1000 m (p FDR \\(\\leq\\) 0.05). In the W. bursa åprokaryotic community, none of the members have a significant different abundance in the two water masses. We interpret these instances as ecotypes, that is, sister OTUs (closely related OTUs) adapted/affiliated to the two different water masses. ### For Ecotype/ sister OTU discussion gb_OTUs &lt;- read.csv(&quot;data/gb_OTUs_overall_rabdc_annotated.csv&quot;, header=T, sep=&quot;,&quot;) sf_OTUs &lt;- read.csv(&quot;data/sf_OTUs_overall_rabdc_annotated.csv&quot;, header=T, sep=&quot;,&quot;) rownames(gb_OTUs) &lt;- gb_OTUs$XOTU gb_OTUs[&quot;OTU_num&quot;] &lt;- str_replace(gb_OTUs$XOTU,&quot;X196900&quot;, &quot;&quot;) rownames(sf_OTUs) &lt;- sf_OTUs$XOTU sf_OTUs[&quot;OTU_num&quot;] &lt;- str_replace(sf_OTUs$XOTU,&quot;X196900&quot;, &quot;&quot;) #gb_sis &lt;- read.csv(&quot;data/gb_similarity.csv&quot;, header = T, sep=&quot;,&quot;) #sf_sis &lt;- read.csv(&quot;data/sf_similarity.csv&quot;, header = T, sep=&quot;,&quot;) #unique(c(gb_sis$Var1, gb_sis$Var2)) %&gt;% # str_replace(&quot;196900&quot;,&quot;&quot;) # 31 OTUs: &quot;323&quot; &quot;236&quot; &quot;280&quot; &quot;231&quot; &quot;589&quot; &quot;192&quot; &quot;144&quot; &quot;253&quot; &quot;208&quot; &quot;418&quot; &quot;196&quot; &quot;180&quot; &quot;284&quot; &quot;363&quot; &quot;213&quot; &quot;161&quot; &quot;307&quot; &quot;331&quot; &quot;310&quot; &quot;367&quot; #&quot;596&quot; &quot;527&quot; &quot;578&quot; &quot;337&quot; &quot;445&quot; &quot;546&quot; &quot;658&quot; &quot;384&quot; &quot;242&quot; &quot;537&quot; &quot;528&quot; #unique(c(sf_sis$Var1, sf_sis$Var2)) %&gt;% # str_replace(&quot;196900&quot;,&quot;&quot;) # 3 OTUs: &quot;137&quot; &quot;337&quot; &quot;498&quot; gb_sis &lt;- read.csv(&quot;data/gb_similarity.csv&quot;, header = T, sep=&quot;,&quot;) gb_sis$Var1 &lt;- c(str_replace(gb_sis$Var1, &quot;196900&quot;, &quot;&quot;)) gb_sis$Var2 &lt;- c(str_replace(gb_sis$Var2, &quot;196900&quot;, &quot;&quot;)) OTU_num_gb &lt;- data.frame(unique(c(gb_sis$Var1, gb_sis$Var2))) colnames(OTU_num_gb) &lt;- c(&quot;sis&quot;) OTU_num_gb[&quot;sis_gb&quot;] &lt;- c(&quot;gb&quot;) gb_sis$X &lt;- NULL sf_sis &lt;- read.csv(&quot;data/sf_similarity.csv&quot;, header = T, sep=&quot;,&quot;) sf_sis$Var1 &lt;- c(str_replace(sf_sis$Var1, &quot;196900&quot;, &quot;&quot;)) sf_sis$Var2 &lt;- c(str_replace(sf_sis$Var2, &quot;196900&quot;, &quot;&quot;)) OTU_num_sf &lt;- data.frame(unique(c(sf_sis$Var1, sf_sis$Var2))) colnames(OTU_num_sf) &lt;- c(&quot;sis&quot;) OTU_num_sf[&quot;sis_sf&quot;] &lt;- c(&quot;sf&quot;) sf_sis$X &lt;- NULL sisters &lt;- full_join(OTU_num_gb, OTU_num_sf) sisters[&quot;combined&quot;] &lt;- c(&quot;both&quot;) sisters$combined[is.na(sisters$sis_sf)] &lt;- c(&quot;gb&quot;) sisters$combined[is.na(sisters$sis_gb)] &lt;- c(&quot;sf&quot;) gb_sis &lt;- left_join(sisters, gb_OTUs, by=c(&quot;sis&quot;=&quot;OTU_num&quot;)) gb_sis_m &lt;- gb_sis %&gt;% #instead of reshape2::melt pivot_longer( col=starts_with(&quot;Gb&quot;) ) gb_sis_m[&quot;order&quot;] &lt;- as.numeric(str_replace(gb_sis_m$name, &quot;Gb&quot;, &quot;&quot;)) ggplot(gb_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = &quot;free&quot;, ncol=4)+ggtitle(&quot;Gb sister OTUs&quot;)+geom_vline(xintercept = 10.5)+theme(legend.position = &quot;bottom&quot;) Figure 3.13: Relative abundance of all sister OTUs in G. barretti and S.fortis. Note that only the category “both” and the respective sponge host (gb or sf) are relevant. The OTUs classified as sister OTUs in the other sponge are added for comparison only. sf_sis &lt;- left_join(sisters, sf_OTUs, by=c(&quot;sis&quot;=&quot;OTU_num&quot;)) sf_sis_m &lt;- sf_sis %&gt;% #instead of reshape2::melt pivot_longer( col=starts_with(&quot;Sf&quot;) ) sf_sis_m[&quot;order&quot;] &lt;- as.numeric(str_replace(sf_sis_m$name, &quot;Sf&quot;, &quot;&quot;)) ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = &quot;free&quot;, ncol=4)+ggtitle(&quot;Sf sister OTUs&quot;)+geom_vline(xintercept = 8.5)+theme(legend.position = &quot;bottom&quot;) Figure 3.14: Relative abundance of all sister OTUs in G. barretti and S.fortis. Note that only the category “both” and the respective sponge host (gb or sf) are relevant. The OTUs classified as sister OTUs in the other sponge are added for comparison only. References "]
]
