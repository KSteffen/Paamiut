var1 <- c(str_sub(sf_sis$Var1,1,3))
var2 <- c(str_sub(sf_sis$Var2,1,3))
OTU_num_sf <- data.frame(unique(var1, var2))
colnames(OTU_num_sf) <- c("sis")
OTU_num_sf["sis_sf"] <- c("sf")
sf_sis$X <- NULL
sisters <- full_join(OTU_num_gb, OTU_num_sf)
sisters["combined"] <- c("both")
sisters$combined[is.na(sisters$sis_sf)] <- c("gb")
sisters$combined[is.na(sisters$sis_gb)] <- c("sf")
gb_sis <- left_join(sisters, gb_OTUs, by=c("sis"="OTU_num"))
gb_sis_m <- gb_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Gb")
)
gb_sis_m["order"] <- as.numeric(str_replace(gb_sis_m$name, "Gb", ""))
ggplot(gb_sis_m, aes(x=order, y=value))+geom_point()+facet_wrap(~OTU_num, scales = "free")+ggtitle("Gb sister OTUs")
gb_sis
View(gb_sis)
ggplot(gb_sis_m, aes(x=order, y=value))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Gb sister OTUs")
sf_sis <- left_join(sisters, sf_overall_rabdc, by=c("sis"="OTU_num"))
sf_sis <- left_join(sisters, sf_OTUs, by=c("sis"="OTU_num"))
sf_sis_m <- sf_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Sf")
)
sf_sis_m["order"] <- as.numeric(str_replace(sf_sis_m$name, "Sf", ""))
ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Sf sister OTUs")
### For Paco's OTUs, REMOVE LATER
gb_OTUs <- read.csv("data/gb_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
sf_OTUs <- read.csv("data/sf_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
rownames(gb_OTUs) <- gb_OTUs$XOTU
gb_OTUs["OTU_num"] <- str_replace(gb_OTUs$XOTU,"X196900", "")
rownames(sf_OTUs) <- sf_OTUs$XOTU
sf_OTUs["OTU_num"] <- str_replace(sf_OTUs$XOTU,"X196900", "")
gb_sis <- read.csv("data/gb_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(gb_sis$Var1,1,3))
var2 <- c(str_sub(gb_sis$Var2,1,3))
OTU_num_gb <- data.frame(unique(var1, var2))
colnames(OTU_num_gb) <- c("sis")
OTU_num_gb["sis_gb"] <- c("gb")
gb_sis$X <- NULL
sf_sis <- read.csv("data/sf_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(sf_sis$Var1,1,3))
var2 <- c(str_sub(sf_sis$Var2,1,3))
OTU_num_sf <- data.frame(unique(var1, var2))
colnames(OTU_num_sf) <- c("sis")
OTU_num_sf["sis_sf"] <- c("sf")
sf_sis$X <- NULL
sisters <- full_join(OTU_num_gb, OTU_num_sf)
sisters["combined"] <- c("both")
sisters$combined[is.na(sisters$sis_sf)] <- c("gb")
sisters$combined[is.na(sisters$sis_gb)] <- c("sf")
gb_sis <- left_join(sisters, gb_OTUs, by=c("sis"="OTU_num"))
gb_sis_m <- gb_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Gb")
)
gb_sis_m["order"] <- as.numeric(str_replace(gb_sis_m$name, "Gb", ""))
ggplot(gb_sis_m, aes(x=order, y=value))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Gb sister OTUs")
sf_sis <- left_join(sisters, sf_OTUs, by=c("sis"="OTU_num"))
sf_sis_m <- sf_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Sf")
)
sf_sis_m["order"] <- as.numeric(str_replace(sf_sis_m$name, "Sf", ""))
ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Sf sister OTUs")
### For Paco's OTUs, REMOVE LATER
gb_OTUs <- read.csv("data/gb_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
sf_OTUs <- read.csv("data/sf_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
rownames(gb_OTUs) <- gb_OTUs$XOTU
gb_OTUs["OTU_num"] <- str_replace(gb_OTUs$XOTU,"X196900", "")
rownames(sf_OTUs) <- sf_OTUs$XOTU
sf_OTUs["OTU_num"] <- str_replace(sf_OTUs$XOTU,"X196900", "")
gb_sis <- read.csv("data/gb_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(gb_sis$Var1,1,3))
var2 <- c(str_sub(gb_sis$Var2,1,3))
OTU_num_gb <- data.frame(unique(var1, var2))
colnames(OTU_num_gb) <- c("sis")
OTU_num_gb["sis_gb"] <- c("gb")
gb_sis$X <- NULL
sf_sis <- read.csv("data/sf_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(sf_sis$Var1,1,3))
var2 <- c(str_sub(sf_sis$Var2,1,3))
OTU_num_sf <- data.frame(unique(var1, var2))
colnames(OTU_num_sf) <- c("sis")
OTU_num_sf["sis_sf"] <- c("sf")
sf_sis$X <- NULL
sisters <- full_join(OTU_num_gb, OTU_num_sf)
sisters["combined"] <- c("both")
sisters$combined[is.na(sisters$sis_sf)] <- c("gb")
sisters$combined[is.na(sisters$sis_gb)] <- c("sf")
gb_sis <- left_join(sisters, gb_OTUs, by=c("sis"="OTU_num"))
gb_sis_m <- gb_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Gb")
)
gb_sis_m["order"] <- as.numeric(str_replace(gb_sis_m$name, "Gb", ""))
ggplot(gb_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Gb sister OTUs")
sf_sis <- left_join(sisters, sf_OTUs, by=c("sis"="OTU_num"))
sf_sis_m <- sf_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Sf")
)
sf_sis_m["order"] <- as.numeric(str_replace(sf_sis_m$name, "Sf", ""))
ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Sf sister OTUs")
View(gb_sis)
getwd()
gb_OTUs <- read.csv("data/gb_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
sf_OTUs <- read.csv("data/sf_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
rownames(gb_OTUs) <- gb_OTUs$XOTU
gb_OTUs["OTU_num"] <- str_replace(gb_OTUs$XOTU,"X196900", "")
rownames(sf_OTUs) <- sf_OTUs$XOTU
sf_OTUs["OTU_num"] <- str_replace(sf_OTUs$XOTU,"X196900", "")
gb_sis <- read.csv("data/gb_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(gb_sis$Var1,1,3))
var2 <- c(str_sub(gb_sis$Var2,1,3))
OTU_num_gb <- data.frame(unique(var1, var2))
colnames(OTU_num_gb) <- c("sis")
OTU_num_gb["sis_gb"] <- c("gb")
gb_sis$X <- NULL
sf_sis <- read.csv("data/sf_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(sf_sis$Var1,1,3))
var2 <- c(str_sub(sf_sis$Var2,1,3))
OTU_num_sf <- data.frame(unique(var1, var2))
colnames(OTU_num_sf) <- c("sis")
OTU_num_sf["sis_sf"] <- c("sf")
sf_sis$X <- NULL
sisters <- full_join(OTU_num_gb, OTU_num_sf)
sisters["combined"] <- c("both")
sisters$combined[is.na(sisters$sis_sf)] <- c("gb")
sisters$combined[is.na(sisters$sis_gb)] <- c("sf")
gb_sis <- left_join(sisters, gb_OTUs, by=c("sis"="OTU_num"))
gb_sis_m <- gb_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Gb")
)
gb_sis_m["order"] <- as.numeric(str_replace(gb_sis_m$name, "Gb", ""))
ggplot(gb_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Gb sister OTUs")
sf_sis <- left_join(sisters, sf_OTUs, by=c("sis"="OTU_num"))
sf_sis_m <- sf_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Sf")
)
sf_sis_m["order"] <- as.numeric(str_replace(sf_sis_m$name, "Sf", ""))
ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Sf sister OTUs")
setwd("~/Documents/Metabolomics/Depth_Gradient_study/R_depth_study/GITHUB_BOOKDOWN/data/")
gb_OTUs <- read.csv("data/gb_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
sf_OTUs <- read.csv("data/sf_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
rownames(gb_OTUs) <- gb_OTUs$XOTU
gb_OTUs["OTU_num"] <- str_replace(gb_OTUs$XOTU,"X196900", "")
rownames(sf_OTUs) <- sf_OTUs$XOTU
sf_OTUs["OTU_num"] <- str_replace(sf_OTUs$XOTU,"X196900", "")
gb_sis <- read.csv("data/gb_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(gb_sis$Var1,1,3))
var2 <- c(str_sub(gb_sis$Var2,1,3))
OTU_num_gb <- data.frame(unique(var1, var2))
colnames(OTU_num_gb) <- c("sis")
OTU_num_gb["sis_gb"] <- c("gb")
gb_sis$X <- NULL
sf_sis <- read.csv("data/sf_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(sf_sis$Var1,1,3))
var2 <- c(str_sub(sf_sis$Var2,1,3))
OTU_num_sf <- data.frame(unique(var1, var2))
colnames(OTU_num_sf) <- c("sis")
OTU_num_sf["sis_sf"] <- c("sf")
sf_sis$X <- NULL
sisters <- full_join(OTU_num_gb, OTU_num_sf)
sisters["combined"] <- c("both")
sisters$combined[is.na(sisters$sis_sf)] <- c("gb")
sisters$combined[is.na(sisters$sis_gb)] <- c("sf")
gb_sis <- left_join(sisters, gb_OTUs, by=c("sis"="OTU_num"))
gb_sis_m <- gb_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Gb")
)
gb_sis_m["order"] <- as.numeric(str_replace(gb_sis_m$name, "Gb", ""))
ggplot(gb_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Gb sister OTUs")
sf_sis <- left_join(sisters, sf_OTUs, by=c("sis"="OTU_num"))
sf_sis_m <- sf_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Sf")
)
sf_sis_m["order"] <- as.numeric(str_replace(sf_sis_m$name, "Sf", ""))
ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Sf sister OTUs")
setwd("~/Documents/Metabolomics/Depth_Gradient_study/R_depth_study/GITHUB_BOOKDOWN/")
### For Paco's OTUs, REMOVE LATER
gb_OTUs <- read.csv("data/gb_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
sf_OTUs <- read.csv("data/sf_OTUs_overall_rabdc_annotated.csv", header=T, sep=",")
rownames(gb_OTUs) <- gb_OTUs$XOTU
gb_OTUs["OTU_num"] <- str_replace(gb_OTUs$XOTU,"X196900", "")
rownames(sf_OTUs) <- sf_OTUs$XOTU
sf_OTUs["OTU_num"] <- str_replace(sf_OTUs$XOTU,"X196900", "")
gb_sis <- read.csv("data/gb_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(gb_sis$Var1,1,3))
var2 <- c(str_sub(gb_sis$Var2,1,3))
OTU_num_gb <- data.frame(unique(var1, var2))
colnames(OTU_num_gb) <- c("sis")
OTU_num_gb["sis_gb"] <- c("gb")
gb_sis$X <- NULL
sf_sis <- read.csv("data/sf_similarity.csv", header = T, sep=",")
var1 <- c(str_sub(sf_sis$Var1,1,3))
var2 <- c(str_sub(sf_sis$Var2,1,3))
OTU_num_sf <- data.frame(unique(var1, var2))
colnames(OTU_num_sf) <- c("sis")
OTU_num_sf["sis_sf"] <- c("sf")
sf_sis$X <- NULL
sisters <- full_join(OTU_num_gb, OTU_num_sf)
sisters["combined"] <- c("both")
sisters$combined[is.na(sisters$sis_sf)] <- c("gb")
sisters$combined[is.na(sisters$sis_gb)] <- c("sf")
gb_sis <- left_join(sisters, gb_OTUs, by=c("sis"="OTU_num"))
gb_sis_m <- gb_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Gb")
)
gb_sis_m["order"] <- as.numeric(str_replace(gb_sis_m$name, "Gb", ""))
ggplot(gb_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Gb sister OTUs")
sf_sis <- left_join(sisters, sf_OTUs, by=c("sis"="OTU_num"))
sf_sis_m <- sf_sis %>% #instead of reshape2::melt
pivot_longer(
col=starts_with("Sf")
)
sf_sis_m["order"] <- as.numeric(str_replace(sf_sis_m$name, "Sf", ""))
ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Sf sister OTUs")
ggplot(gb_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Gb sister OTUs")
ggplot(sf_sis_m, aes(x=order, y=value, col=combined))+geom_point()+facet_wrap(~sis, scales = "free")+ggtitle("Sf sister OTUs")
View(sf_sis)
sf_sis <- read.csv("data/sf_similarity.csv", header = T, sep=",")
sf_sis
View(sf_sis)
#Works, but need to figure out how to plot only a fraction at a time
micro <- read.csv("data/OTU_all_R.csv", header = T, sep = ";")
meta_data <- read.csv("data/Steffen_et_al_metadata_PANGAEA.csv", header=T, sep=";")
meta_data <- meta_data_prep(meta_data)
OTU_prep <- function(micro){
rownames(micro) <- micro$Sample_ID
micro$Sample_ID <- NULL
#micro <- sqrt(micro)
micro_gb <- micro[(str_sub(rownames(micro), 1,2)=="Gb"),]
micro_sf <- micro[(str_sub(rownames(micro), 1,2)=="Sf"),]
micro_wb <- micro[(str_sub(rownames(micro), 1,2)=="Wb"),]
micro_gb <- micro_gb[,colSums(micro_gb!=0)>0]
micro_sf <- micro_sf[,colSums(micro_sf!=0)>0]
micro_wb <- micro_wb[,colSums(micro_wb!=0)>0]
micros <- list(gb=micro_gb, sf=micro_sf, wb=micro_wb)
return(micros)
}
### Additional segment for ginormous plot of individual OTU depth response
#micro_ds <- OTU_prep(micro)
#rabdc <- lapply(micro_ds, rel_abdc)
#rabdc$gb["XOTU"] <- rownames(rabdc$gb)
#gb_resp <- reshape2::melt(rabdc$gb, idvars=c("XOTU"))
#md <- meta_data[,c("Depth", "unified_ID")]
#gb_resp <- left_join(gb_resp, md, by=c("variable"="unified_ID"))
#gb_resp$Depth <- as.numeric(gb_resp$Depth)
#gb_resp["lab"] <- str_replace(gb_resp$XOTU,"X196900", "OTU")
#gb_resp$lab <- as.factor(gb_resp$lab)
#ggplot(gb_resp, aes(x=Depth, y=value))+geom_point()+theme_bw()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+facet_wrap("lab")
### Additional segment to produce a relative abundace table
#micro <- read.csv("data/OTU_all_R.csv", header = T, sep = ";")
#meta_data <- read.csv("data/Steffen_et_al_metadata_PANGAEA.csv", header=T, sep=";")
#meta_data <- meta_data_prep(meta_data)
micro_ds <- OTU_prep(micro)
rabdc <- lapply(micro_ds, overall_rabdc)
rabdc$gb[,c("avg_rel_abdc", "occurrence" )] <- list(NULL)
rabdc$sf[,c("avg_rel_abdc", "occurrence" )] <- list(NULL)
rabdc$wb[,c("avg_rel_abdc", "occurrence" )] <- list(NULL)
response <- lapply(rabdc, inc_dec, meta_data=meta_data)
rabdc$gb <- rabdc$gb[,c(1, 7, 8, 9, 10, 11, 12, 13, 14, 2, 3, 4, 5, 6)] # sort
rabdc$sf <- rabdc$sf[,c(1, 8, 9, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7)]
rabdc$wb <- rabdc$wb[,c(1, 9, 10, 11, 12, 13, 14, 15, 16, 2, 3, 4, 5, 6, 7, 8)]
# use this to check with samples are shallow and deep
meta_data[meta_data$spec=="Wb",] %>%
arrange(Depth)
#rabdc$gb # Gb 1:14; 1:10 vs 11:14
shallow_gb <- data.frame(apply(rabdc$gb[,c(1:10)], 1, mean))
deep_gb <- data.frame(apply(rabdc$gb[,c(11:14)], 1, mean))
#rabdc$sf # Sf 1:15; 1:8 vs 9:15
shallow_sf <- data.frame(apply(rabdc$sf[,c(1:8)], 1, mean))
deep_sf <- data.frame(apply(rabdc$sf[,c(9:15)], 1, mean))
#rabdc$wb # Wb 1:16; 1:12 vs 13:16
shallow_wb <- data.frame(apply(rabdc$wb[,c(1:12)], 1, mean))
deep_wb <- data.frame(apply(rabdc$wb[,c(13:16)], 1, mean))
ttest_gb <- data.frame(apply(rabdc$gb, 1, function(x) {t.test(x[1:10], x[11:14], paired = F, alternative = "two.sided", var.equal = TRUE)$p.v }))
ttest_sf <- data.frame(apply(rabdc$sf, 1, function(x) {t.test(x[1:8], x[9:15], paired = F, alternative = "two.sided", var.equal = TRUE)$p.v }))
ttest_wb <- data.frame(apply(rabdc$wb, 1, function(x) {t.test(x[1:12], x[13:16], paired = F, alternative = "two.sided", var.equal = TRUE)$p.v }))
fdr_gb <- data.frame(p.adjust(ttest_gb[,1], method = "fdr")) # aka Benjamini & Hochberg
fdr_sf <- data.frame(p.adjust(ttest_sf[,1], method = "fdr"))
fdr_wb <- data.frame(p.adjust(ttest_wb[,1], method = "fdr"))
averages_gb <- cbind(shallow_gb, deep_gb, ttest_gb, fdr_gb)
averages_sf <- cbind(shallow_sf, deep_sf, ttest_sf, fdr_sf)
averages_wb <- cbind(shallow_wb, deep_wb, ttest_wb, fdr_wb)
colnames(averages_gb) <- c("shallow_mean", "deep_mean", "ttest_pval", "ttest_fdr")
colnames(averages_sf) <- c("shallow_mean", "deep_mean", "ttest_pval", "ttest_fdr")
colnames(averages_wb) <- c("shallow_mean", "deep_mean", "ttest_pval", "ttest_fdr")
all((rownames(rabdc$gb)==rownames(averages_gb)))
all((rownames(rabdc$gb)==(response$gb["XOTU"])))
gb_OTUs <- cbind(rabdc$gb, averages_gb, response$gb)
all((rownames(rabdc$sf)==rownames(averages_sf)))
all((rownames(rabdc$sf)==(response$sf["XOTU"])))
sf_OTUs <- cbind(rabdc$sf, averages_sf, response$sf)
all((rownames(rabdc$wb)==rownames(averages_wb)))
all((rownames(rabdc$wb)==(response$wb["XOTU"])))
wb_OTUs <- cbind(rabdc$wb, averages_wb, response$wb)
write.csv(gb_OTUs, "data/gb_OTUs_overall_rabdc_annotated.csv", row.names =F)
write.csv(sf_OTUs, "data/sf_OTUs_overall_rabdc_annotated.csv", row.names =F)
write.csv(wb_OTUs, "data/wb_OTUs_overall_rabdc_annotated.csv", row.names =F)
#continue with chunk 'paco-sister-viz-stats'
View(gb_OTUs)
# Sister OTUs
dist_gb <- read.csv("data/gb_similarity.csv")
dist_sf <- read.csv("data/sf_similarity.csv")
dist_wb <- read.csv("data/wb_similarity.csv")
View(dist_gb)
#Load one file at a time
ali <- read.alignment("data/gb_reads_for_phylogeny_MAFFT.fasta", "fasta")
#ali <- read.alignment("data/sf_reads_for_phylogeny_MAFFT.fasta", "fasta")
#ali <- read.alignment("data/wb_reads_for_phylogeny_MAFFT.fasta", "fasta")
# FUN calculate pairwise distance, melt, keeps only entries with >97% and <1 similarity with significant opposing trends in both partners.
pw_dist <- function(ali){
dist <- as.matrix(dist.alignment(ali, matrix = "similarity" ))  #https://www.researchgate.net/post/Homology_similarity_and_identity-can_anyone_help_with_these_terms
# dist.alignment: matrix contains the squared root of the pairwise distances. For example, if identity between 2 sequences is 80 the squared root of (1.0 - 0.8) i.e. 0.4472136.
dist <- dist**2
dist <- 1-dist
#dist is now "%" identity, 1=100 %
dist <- melt(dist)
# Remove irrelevant entries, i.e. self-comparison and similarities below the threshold, this step now speeds up later steps, but not mandatory
dist <- dist[dist$value>=0.97,]
dist <- dist[!dist$value==1,]
# This removes AB - BA duplicates but still contains self comprisons, AA, BB,CC etc.
cols <- c("Var1", "Var2")
newdf <- dist [,cols]
for (i in 1:nrow(newdf)){
newdf[i, ] = sort(newdf[i,cols])
}
newdf <- newdf[!duplicated(newdf),]
# add back similarity values to the remaining comparisons/pairs
dist <- left_join(newdf, dist, by=c("Var1"="Var1", "Var2"="Var2"))
dist["Var1_response"] <- str_sub(dist$Var1, 5,10)
dist["Var2_response"] <- str_sub(dist$Var2, 5,10)
#remove not significant comparisons
#dist <- dist[!dist$Var1_response=="dec.tr",] # can be toggled off
#dist <- dist[!dist$Var1_response=="inc.tr",] # can be toggled off
#dist <- dist[!dist$Var2_response=="dec.tr",] # can be toggled off
#dist <- dist[!dist$Var2_response=="inc.tr",] # can be toggled off
dist <- dist[!dist$Var2_response==dist$Var1_response,]
# order
dist <- dist[order(dist$Var1_response, dist$Var2_response),]
return(dist)
}
dist <- pw_dist(ali)
dist
# create csv file
write.csv(dist, "data/gb_similarity.csv") # GB
#write.csv(dist, "data/sf_similarity.csv") # SF
#write.csv(dist, "data/wb_similarity.csv") # WB
#Load one file at a time
#ali <- read.alignment("data/gb_reads_for_phylogeny_MAFFT.fasta", "fasta")
ali <- read.alignment("data/sf_reads_for_phylogeny_MAFFT.fasta", "fasta")
#ali <- read.alignment("data/wb_reads_for_phylogeny_MAFFT.fasta", "fasta")
# FUN calculate pairwise distance, melt, keeps only entries with >97% and <1 similarity with significant opposing trends in both partners.
pw_dist <- function(ali){
dist <- as.matrix(dist.alignment(ali, matrix = "similarity" ))  #https://www.researchgate.net/post/Homology_similarity_and_identity-can_anyone_help_with_these_terms
# dist.alignment: matrix contains the squared root of the pairwise distances. For example, if identity between 2 sequences is 80 the squared root of (1.0 - 0.8) i.e. 0.4472136.
dist <- dist**2
dist <- 1-dist
#dist is now "%" identity, 1=100 %
dist <- melt(dist)
# Remove irrelevant entries, i.e. self-comparison and similarities below the threshold, this step now speeds up later steps, but not mandatory
dist <- dist[dist$value>=0.97,]
dist <- dist[!dist$value==1,]
# This removes AB - BA duplicates but still contains self comprisons, AA, BB,CC etc.
cols <- c("Var1", "Var2")
newdf <- dist [,cols]
for (i in 1:nrow(newdf)){
newdf[i, ] = sort(newdf[i,cols])
}
newdf <- newdf[!duplicated(newdf),]
# add back similarity values to the remaining comparisons/pairs
dist <- left_join(newdf, dist, by=c("Var1"="Var1", "Var2"="Var2"))
dist["Var1_response"] <- str_sub(dist$Var1, 5,10)
dist["Var2_response"] <- str_sub(dist$Var2, 5,10)
#remove not significant comparisons
#dist <- dist[!dist$Var1_response=="dec.tr",] # can be toggled off
#dist <- dist[!dist$Var1_response=="inc.tr",] # can be toggled off
#dist <- dist[!dist$Var2_response=="dec.tr",] # can be toggled off
#dist <- dist[!dist$Var2_response=="inc.tr",] # can be toggled off
dist <- dist[!dist$Var2_response==dist$Var1_response,]
# order
dist <- dist[order(dist$Var1_response, dist$Var2_response),]
return(dist)
}
dist <- pw_dist(ali)
dist
# create csv file
#write.csv(dist, "data/gb_similarity.csv") # GB
write.csv(dist, "data/sf_similarity.csv") # SF
#write.csv(dist, "data/wb_similarity.csv") # WB
#Load one file at a time
#ali <- read.alignment("data/gb_reads_for_phylogeny_MAFFT.fasta", "fasta")
#ali <- read.alignment("data/sf_reads_for_phylogeny_MAFFT.fasta", "fasta")
ali <- read.alignment("data/wb_reads_for_phylogeny_MAFFT.fasta", "fasta")
# FUN calculate pairwise distance, melt, keeps only entries with >97% and <1 similarity with significant opposing trends in both partners.
pw_dist <- function(ali){
dist <- as.matrix(dist.alignment(ali, matrix = "similarity" ))  #https://www.researchgate.net/post/Homology_similarity_and_identity-can_anyone_help_with_these_terms
# dist.alignment: matrix contains the squared root of the pairwise distances. For example, if identity between 2 sequences is 80 the squared root of (1.0 - 0.8) i.e. 0.4472136.
dist <- dist**2
dist <- 1-dist
#dist is now "%" identity, 1=100 %
dist <- melt(dist)
# Remove irrelevant entries, i.e. self-comparison and similarities below the threshold, this step now speeds up later steps, but not mandatory
dist <- dist[dist$value>=0.97,]
dist <- dist[!dist$value==1,]
# This removes AB - BA duplicates but still contains self comprisons, AA, BB,CC etc.
cols <- c("Var1", "Var2")
newdf <- dist [,cols]
for (i in 1:nrow(newdf)){
newdf[i, ] = sort(newdf[i,cols])
}
newdf <- newdf[!duplicated(newdf),]
# add back similarity values to the remaining comparisons/pairs
dist <- left_join(newdf, dist, by=c("Var1"="Var1", "Var2"="Var2"))
dist["Var1_response"] <- str_sub(dist$Var1, 5,10)
dist["Var2_response"] <- str_sub(dist$Var2, 5,10)
#remove not significant comparisons
#dist <- dist[!dist$Var1_response=="dec.tr",] # can be toggled off
#dist <- dist[!dist$Var1_response=="inc.tr",] # can be toggled off
#dist <- dist[!dist$Var2_response=="dec.tr",] # can be toggled off
#dist <- dist[!dist$Var2_response=="inc.tr",] # can be toggled off
dist <- dist[!dist$Var2_response==dist$Var1_response,]
# order
dist <- dist[order(dist$Var1_response, dist$Var2_response),]
return(dist)
}
dist <- pw_dist(ali)
dist
# create csv file
#write.csv(dist, "data/gb_similarity.csv") # GB
#write.csv(dist, "data/sf_similarity.csv") # SF
write.csv(dist, "data/wb_similarity.csv") # WB
dist_gb <- read.csv("data/gb_similarity.csv")
dist_sf <- read.csv("data/sf_similarity.csv")
dist_wb <- read.csv("data/wb_similarity.csv")
View(dist_gb)
#Load one file at a time
ali <- read.alignment("data/gb_reads_for_phylogeny_MAFFT.fasta", "fasta")
dist <- as.matrix(dist.alignment(ali, matrix = "similarity" ))  #https://www.researchgate.net/post/Homology_similarity_and_identity-can_anyone_help_with_these_terms
# dist.alignment: matrix contains the squared root of the pairwise distances. For example, if identity between 2 sequences is 80 the squared root of (1.0 - 0.8) i.e. 0.4472136.
dist <- dist**2
dist <- 1-dist
#dist is now "%" identity, 1=100 %
dist <- melt(dist)
dist
View(dist)
ibrary(seqinr)
# ============================ BREAK ================================
# RUN ONE AT A TIME
XOTU <- data.frame(colnames(OTU_gb))
colnames(XOTU) <- c("XOTU")
fastas <- fastas[fastas$XOTU %in% XOTU$XOTU,]
dim(fastas)[1]==dim(XOTU)[1]
head(fastas)
View(fastas)
fastas <- read.csv("data/OTUs_reads_fasta_column.csv", header=F, sep=";")
head(fastas)
OTU_all <- read.csv("data/OTU_all_R.csv", header = T, sep = ";")
# format fasta header column to match "XOTU" format
colnames(fastas) <- c("header", "seq")
fastas["OTU"] <- str_sub(fastas$header, 2, 13)
fastas["dummy"] <- "X"
fastas["XOTU"] <- paste0(fastas$dummy, fastas$OTU)
fastas$dummy <- NULL
fastas$OTU <- NULL
head(fastas)
# prepare data sets of OTUs for the three sponge hosts
OTU_all["spec"] <- str_sub(OTU_all$Sample_ID, 1,2)
OTU_gb <- OTU_all[OTU_all$spec=="Gb",]
OTU_sf <- OTU_all[OTU_all$spec=="Sf",]
OTU_wb <- OTU_all[OTU_all$spec=="Wb",]
#dim(OTU_gb) # 14 693, 693= 691 +sample_ID +spec
#dim(OTU_sf) # 15 693, 693= 691 +sample_ID +spec
#dim(OTU_wb) # 16 693, 693= 691 +sample_ID +spec
# remove cols with all 0
OTU_gb <- OTU_gb[, colSums(OTU_gb != 0) > 0]
OTU_sf <- OTU_sf[, colSums(OTU_sf != 0) > 0]
OTU_wb <- OTU_wb[, colSums(OTU_wb != 0) > 0]
#dim(OTU_gb) # 14 422, 422= 420 +sample_ID +spec
#dim(OTU_sf) # 15 463, 463= 461 +sample_ID +spec
#dim(OTU_wb) # 16 137, 137= 135 +sample_ID +spec
OTU_gb[, c("spec", "Sample_ID")]<- list(NULL)
OTU_sf[, c("spec", "Sample_ID")]<- list(NULL)
OTU_wb[, c("spec", "Sample_ID")]<- list(NULL)
# ============================ BREAK ================================
# RUN ONE AT A TIME
XOTU <- data.frame(colnames(OTU_gb))
View(XOTU)
colnames(XOTU) <- c("XOTU")
fastas <- fastas[fastas$XOTU %in% XOTU$XOTU,]
dim(fastas)[1]==dim(XOTU)[1]
head(fastas)
View(fastas)
#fastas <- left_join(fastas, OTU_annotation[,c("XOTU", "inc_dec", "Phylum", "Class")])
fastas["dummy"] <- ">"
fastas["OTU"] <- str_sub(fastas$header, -3)
fastas["concat1"] <- paste0(fastas$dummy, fastas$OTU)
View(fastas)
fastas["concat"] <- paste(fastas$concat1, fastas$inc_dec, fastas$Phylum, fastas$Class, sep="_")
fastas["concat"] <- paste(fastas$concat1, fastas$inc_dec, fastas$Phylum, fastas$Class, sep=" ")
fastas[, c("Phylum","Class","inc_dec", "XOTU", "header")]<- list(NULL)
fastas["newline"] <- "\n"
View(fastas)
